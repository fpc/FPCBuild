#
#   Makefile.fpc for Free Pascal Source Tree
#

[package]
name=fpc
version=3.0.4

[target]
dirs=fpcsrc fpcdocs

[require]
nortl=y

[install]
fpcpackage=y

[default]
fpcdir=.
rule=help

[prerules]
# Check if install/ subdir is available
ifneq ($(wildcard install),)
CVSINSTALL=install
else
CVSINSTALL=.
endif

# Prefix for units
ifneq ($(findstring $(OS_SOURCE),$(LIMIT83fs)),)
PKGUNITSPRE=u
else
PKGUNITSPRE=units-
endif

# Cross compile needs a prefix to not conflict with original packages
ifdef CROSSINSTALL
PKGPRE=$(FULL_TARGET)-
else
PKGPRE=
endif

# We want to have the resulting .zips in the current dir
ifndef DIST_DESTDIR
export DIST_DESTDIR:=$(BASEDIR)
endif


[rules]
#####################################################################
# Main targets
#####################################################################

.PHONY: help checkfpcdir

help:
        @$(ECHO)
        @$(ECHO) Targets
        @$(ECHO)    all         Alias for build
        @$(ECHO)    build       Build a new compiler and all packages
        @$(ECHO)    install     Install newly build files
        @$(ECHO)    zipinstall  Create zip/tar of installed files
        @$(ECHO)    singlezipinstall  Alias for zipinstall
        @$(ECHO)
        @$(ECHO) Distribution Targets:
        @$(ECHO)    rpm         Build linux .rpm packages
        @$(ECHO)    deb         Build linux .deb packages
        @$(ECHO)    inno        "Build Windows (Innosetup) based installer"
        @$(ECHO)    innox64     "Build Win32-Win64 cross compiler installer"
        @$(ECHO)    innoce      "Build Win32-Wince cross compiler installer"
        @$(ECHO)    innomsdos   "Build Win32-MsDos cross compiler installer"
        @$(ECHO)    innoandroid "Build Win32-Android cross compiler installer"
        @$(ECHO)    tar         Build .tar installer
        @$(ECHO)
        @$(ECHO) FV based installer Targets:
        @$(ECHO)    go32v2zip   Build .zip files for go32v2
        @$(ECHO)    os2zip      Build .zip files for OS/2
        @$(ECHO)    sourcezip   Build .zip files for the sources
        @$(ECHO)
        @exit


##########################################################################
# Packaging
##########################################################################

ifdef LINKISCOPY
ifndef LINKTREE
LINKTREE:=$(CPPROG) -Rfp
endif
else
ifndef LINKTREE
LINKTREE:=$(CPPROG) -Rfpl
endif
endif

BUILDSTAMP=fpcsrc/build-stamp.$(FULL_TARGET)

.PHONY: all clean distclean build install installbase zipinstall singlezipinstall

all: build

build: $(BUILDSTAMP)
$(BUILDSTAMP):
        $(MAKE) -C fpcsrc build

buildx64: fpcsrc/build-stamp.x86_64-win64

fpcsrc/build-stamp.x86_64-win64:
        $(MAKE) -C fpcsrc build OS_TARGET=win64 CPU_TARGET=x86_64

buildce: fpcsrc/build-stamp.arm-wince

fpcsrc/build-stamp.arm-wince:
        $(MAKE) -C fpcsrc build OS_TARGET=wince CPU_TARGET=arm
		
buildjvm: fpcsrc/build-stamp.jvm-java fpcsrc/build-stamp.jvm-android

fpcsrc/build-stamp.jvm-java:
# currently, jvm supports only build base, so we have to use make all here		
        $(MAKE) -C fpcsrc all OS_TARGET=java CPU_TARGET=jvm
		
fpcsrc/build-stamp.jvm-android:
# currently, jvm supports only build base, so we have to use make all here		
        $(MAKE) -C fpcsrc all OS_TARGET=android CPU_TARGET=jvm

build_android_arm: fpcsrc/build-stamp.arm-android

fpcsrc/build-stamp.arm-android:
        $(MAKE) -C fpcsrc build OS_TARGET=android CPU_TARGET=arm CROSSBINDIR=$(ANDROID_ARM_BINUTILS) BINUTILSPREFIX=arm-linux-androideabi- CROSSOPT="$(CROSSOPT) -Fl$(NDK_LIB)/arch-arm/usr/lib"

build_android_i386: fpcsrc/build-stamp.i386-android

fpcsrc/build-stamp.i386-android:
        $(MAKE) -C fpcsrc build OS_TARGET=android CPU_TARGET=i386 CROSSBINDIR=$(ANDROID_X86_BINUTILS) BINUTILSPREFIX=i686-linux-android- CROSSOPT="$(CROSSOPT) -Fl$(NDK_LIB)/arch-x86/usr/lib"

build_android_mipsel: fpcsrc/build-stamp.mipsel-android

fpcsrc/build-stamp.mipsel-android:
        $(MAKE) -C fpcsrc build OS_TARGET=android CPU_TARGET=mipsel CROSSBINDIR=$(ANDROID_MIPS_BINUTILS) BINUTILSPREFIX=mipsel-linux-android- CROSSOPT="$(CROSSOPT) -Fl$(NDK_LIB)/arch-mips/usr/lib"

clean: $(addsuffix _distclean,$(TARGET_DIRS))
        -rm -f fpcsrc/build-stamp.*

distclean: clean

installbase:
# create dirs
        $(MKDIR) $(INSTALL_BASEDIR)
        $(MKDIR) $(INSTALL_BINDIR)
ifeq ($(OS_TARGET),wince)
        $(COPY) $(addprefix $(CVSINSTALL)/crossbinwce/, *.exe) $(INSTALL_BINDIR)
endif
ifeq ($(OS_TARGET),win64)
        $(COPY) $(addprefix $(CVSINSTALL)/crossbinw64/, *.exe) $(INSTALL_BINDIR)
endif
ifeq ($(OS_TARGET),msdos)
        $(COPY) $(addprefix $(CVSINSTALL)/crossbinmsdos/, *.exe) $(INSTALL_BINDIR)
endif
# readme, whatsnew, licenses and additional docs, they must be always included
        $(MKDIR) $(INSTALL_DOCDIR)
        -$(COPY) $(addprefix $(CVSINSTALL)/doc/,*.txt copying* license* faq.*) $(INSTALL_DOCDIR)
# but don't include readme-jvm.txt for lfn challenged targets (gives problems unzipping)
ifneq ($(findstring $(OS_TARGET),$(LIMIT83fs)),)
	$(DEL) $(INSTALL_DOCDIR)/readme-jvm.txt
endif
ifndef SNAPSHOT
ifndef CROSSINSTALL
# bingo32 (cwsdpmi,wmemu387.dxe)
ifeq ($(OS_TARGET),go32v2)
        $(COPY) $(CVSINSTALL)/bingo32/*.dxe $(INSTALL_BINDIR)
        $(COPY) $(CVSINSTALL)/bingo32/*.exe $(INSTALL_BINDIR)
endif
# binw32 (*.dll,*.exe,*.ico)
ifneq ($(patsubst %/,%,$(subst \,/,$(dir $(CPPROG)))),$(patsubst %/,%,$(subst \,/,$(INSTALL_BINDIR))))
ifeq ($(OS_TARGET),win32)
        $(COPY) $(addprefix $(CVSINSTALL)/binw32/,*.ico *.exe *.dll *.h *.manifest) $(INSTALL_BINDIR)
endif
# binw64 (some extensions have no corresponding files yet, thus we need to
# ignore errors.
ifeq ($(OS_TARGET),win64)
        -$(COPY) $(addprefix $(CVSINSTALL)/binw64/,*.ico *.exe *.dll *.h *.manifest) $(INSTALL_BINDIR)
endif
endif
# binos2 (emx.dll,emxwrap.dll,unzip32.dll,fp2.ico)
ifeq ($(OS_TARGET),os2)
        $(COPY) $(addprefix $(CVSINSTALL)/binos2/,*.ico *.dll) $(INSTALL_BINDIR)
endif
# binos2 (emx.dll,emxwrap.dll,unzip32.dll,fp2.ico)
ifeq ($(OS_TARGET),emx)
        $(COPY) $(addprefix $(CVSINSTALL)/binos2/,*.ico *.dll) $(INSTALL_BINDIR)
endif
# manpages for UNIX systems
ifneq ($(findstring $(OS_TARGET),linux freebsd netbsd openbsd sunos qnx),)
        $(MAKE) -C $(CVSINSTALL)/man installman
endif
# jvm utils
ifeq ($(CPU_TARGET),jvm)
        $(COPY) $(CVSINSTALL)/jvm/*.jar $(INSTALL_BINDIR)
endif
endif
endif
# install generated things
        $(MAKE) -C fpcsrc installbase

install: $(BUILDSTAMP)
        $(MAKE) installbase
        $(MAKE) -C fpcsrc installother

crossinstall: $(BUILDSTAMP)
        $(MAKE) installbase CROSSINSTALL=1
        $(MAKE) -C fpcsrc installother CROSSINSTALL=1

zipinstall: $(BUILDSTAMP)
        $(MAKE) fpc_zipinstall ZIPTARGET=installbase ZIPNAME=base
        $(MAKE) -C fpcsrc zipinstallother

singlezipinstall: $(BUILDSTAMP)
        $(MAKE) fpc_zipinstall ZIPTARGET=install ZIPNAME=fpc-$(PACKAGE_VERSION)

crosszipinstall: $(BUILDSTAMP)
        $(MAKE) fpc_zipinstall CROSSINSTALL=1 ZIPTARGET=installbase ZIPNAME=base
        $(MAKE) -C fpcsrc zipinstallother CROSSINSTALL=1

##########################################################################
# Docs
##########################################################################

.PHONY: docspdf makepackdocs docsrcinstall docsrc

# We don't want the package name fpc in the path
DOCSOURCEDIR=$(INSTALL_SOURCEDIR)/../docs

docspdf:
        $(MAKE) -C fpcdocs pdfinstall DOCINSTALLDIR=$(PACKDIR)

# Used by makepack to generate unix installation .tar
makepackdocs:
        $(MAKE) fpc_zipinstall ZIPTARGET=docspdf FULLZIPNAME=docs

docsrcinstall:
        $(MAKE) -C fpcdocs distclean
        $(MKDIR) $(DOCSOURCEDIR)
        $(COPYTREE) fpcdocs/* $(DOCSOURCEDIR)

docsrc:
        $(MAKE) fpc_zipinstall ZIPTARGET=docsrcinstall FULLZIPNAME=docsrc


##########################################################################
# Demos
##########################################################################

.PHONY: demozip

# We don't want the package name fpc in the path
ifeq ($(MAKEPACK),)
ifdef UNIXHier
DEMOSOURCEDIR=$(INSTALL_DOCDIR)/../demo
else
DEMOSOURCEDIR=$(INSTALL_PREFIX)/demo
endif
else
DEMOSOURCEDIR=$(PACKDIR)
endif

demosrcinstall:
        $(MAKE) -C demo clean
        $(MKDIR) $(DEMOSOURCEDIR)
        $(COPYTREE) demo/* $(DEMOSOURCEDIR)

demozip:
        $(MAKE) fpc_zipinstall ZIPTARGET=demosrcinstall FULLZIPNAME=demo


##########################################################################
# Source targets
##########################################################################

.PHONY: sourcebase sourcezip

# We don't want the fpc/ package prefix
INSTALL_BASESOURCEDIR=$(INSTALL_SOURCEDIR)/..

sourcebase:
# base Makefiles needed for sources
        $(MKDIR) $(INSTALL_BASESOURCEDIR)
        $(MKDIR) $(INSTALL_BASESOURCEDIR)/packages
        $(COPY) fpcsrc/Makefile*  $(INSTALL_BASESOURCEDIR)
        $(COPY) fpcsrc/packages/Makefile* $(INSTALL_BASESOURCEDIR)/packages
        $(COPY) fpcsrc/packages/fpmake.pp $(INSTALL_BASESOURCEDIR)/packages
        $(COPY) fpcsrc/packages/fpmake_add.inc $(INSTALL_BASESOURCEDIR)/packages
        $(COPY) fpcsrc/packages/fpmake_proc.inc $(INSTALL_BASESOURCEDIR)/packages

sourcezip:
        $(MAKE) fpc_zipinstall ZIPTARGET=sourcebase ZIPNAME=base ZIPSUFFIX=$(ZIPSOURCESUFFIX)
        $(MAKE) -C fpcsrc compiler_zipsourceinstall
        $(MAKE) -C fpcsrc rtl_zipsourceinstall
        $(MAKE) -C fpcsrc packages_zipsourceinstall ZIPPREFIX=$(PKGUNITSPRE)
        $(MAKE) -C fpcsrc utils_zipsourceinstall
        $(MAKE) -C fpcsrc ide_zipsourceinstall
        $(MAKE) -C fpcsrc installer_zipsourceinstall


##########################################################################
# OS targets
##########################################################################

BUILDTARGETS=go32v2 win32 linux freebsd netbsd openbsd os2 emx sunos qnx beos win64 wince

.PHONY: go32v2 win32 win64 wince linux freebsd os2 emx netbsd openbsd go32v2zip win32zip linuxzip freebsdzip os2zip emxzip netbsdzip openbsdzip

$(BUILDTARGETS): checkfpcdir
        $(MAKE) install OS_TARGET=$@

$(addsuffix zip,$(filter-out beos sunos,$(BUILDTARGETS))): checkfpcdir
        $(MAKE) zipinstall OS_TARGET=$(subst zip,,$@)

beoszip : checkfpcdir
        $(MAKE) zipinstall OS_TARGET=beos USEZIP=1

sunoszip: checkfpcdir
        $(MAKE) zipinstall OS_TARGET=sunos TARPROG=gtar


##########################################################################
# Dos, OS/2 Short 8.3 Names
##########################################################################

.PHONY: renametoshort shortsrc shortbin shortnames

renametoshort:
# Compiler parts
        -mv $(PKGPRE)base$(ZIPSUFFIX).zip base$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)compiler$(ZIPSUFFIX).zip comp$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)utils$(ZIPSUFFIX).zip utils$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)installer$(ZIPSUFFIX).zip inst$(ZIPSUFFIXSHORT).zip
# Utilities parts
        -mv $(PKGPRE)asld$(ZIPSUFFIX).zip asld$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)make$(ZIPSUFFIX).zip make$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)gdb$(ZIPSUFFIX).zip gdb$(ZIPSUFFIXSHORT).zip
# Packages
        -mv $(PKGPRE)$(PKGUNITSPRE)gdbint$(ZIPSUFFIX).zip ugdb$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)regexpr$(ZIPSUFFIX).zip ureg$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)paszlib$(ZIPSUFFIX).zip upzl$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)unzip$(ZIPSUFFIX).zip uzip$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)ftpapi$(ZIPSUFFIX).zip uftp$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)hwvideo$(ZIPSUFFIX).zip uhwv$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)clkdll$(ZIPSUFFIX).zip uclk$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)pasjpeg$(ZIPSUFFIX).zip upjp$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)fv$(ZIPSUFFIX).zip ufv$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)rexx$(ZIPSUFFIX).zip urexx$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)zlib$(ZIPSUFFIX).zip uzlib$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)mmtk$(ZIPSUFFIX).zip ummtk$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)lvm$(ZIPSUFFIX).zip ulvm$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)imlib$(ZIPSUFFIX).zip uimlb$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)libpng$(ZIPSUFFIX).zip ulpng$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)opengl$(ZIPSUFFIX).zip uogl$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)graph$(ZIPSUFFIX).zip ugrph$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)sqlite$(ZIPSUFFIX).zip usqlt$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)cdrom$(ZIPSUFFIX).zip ucdr$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)fpgtk$(ZIPSUFFIX).zip ufpgt$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)ibase$(ZIPSUFFIX).zip uibas$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)mysql$(ZIPSUFFIX).zip umysq$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)oracle$(ZIPSUFFIX).zip uora$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)postgres$(ZIPSUFFIX).zip upgr$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)winunits$(ZIPSUFFIX).zip uwin$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)fcl-async$(ZIPSUFFIX).zip ufcla$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)fcl-base$(ZIPSUFFIX).zip ufclb$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)fcl-db$(ZIPSUFFIX).zip ufcld$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)fcl-fpcunit$(ZIPSUFFIX).zip ufclu$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)fcl-image$(ZIPSUFFIX).zip ufcli$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)fcl-net$(ZIPSUFFIX).zip ufcln$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)fcl-passrc$(ZIPSUFFIX).zip ufcls$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)fcl-process$(ZIPSUFFIX).zip ufclp$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)fcl-registry$(ZIPSUFFIX).zip ufclr$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)fcl-sound$(ZIPSUFFIX).zip ufsnd$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)fcl-web$(ZIPSUFFIX).zip ufclw$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)fcl-xml$(ZIPSUFFIX).zip ufclx$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)fcl-json$(ZIPSUFFIX).zip ufclj$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)httpd1.3$(ZIPSUFFIX).zip uhd13$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)httpd2.0$(ZIPSUFFIX).zip uhd20$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)httpd2.2$(ZIPSUFFIX).zip uhd22$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)oggvorbis$(ZIPSUFFIX).zip uoggv$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)openal$(ZIPSUFFIX).zip uoal$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)openssl$(ZIPSUFFIX).zip uossl$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)fpmkunit$(ZIPSUFFIX).zip ufpmk$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)os2units$(ZIPSUFFIX).zip uos2$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)libgd$(ZIPSUFFIX).zip ulgd$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)symbolic$(ZIPSUFFIX).zip usymb$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)fcl-res$(ZIPSUFFIX).zip ufcle$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)chm$(ZIPSUFFIX).zip uchm$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)hash$(ZIPSUFFIX).zip uhash$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)bzip2$(ZIPSUFFIX).zip ubz2$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)hermes$(ZIPSUFFIX).zip uherm$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)fcl-js$(ZIPSUFFIX).zip ufcjs$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)fppkg$(ZIPSUFFIX).zip ufppk$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)fcl-sdo$(ZIPSUFFIX).zip ufcsd$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)fcl-stl$(ZIPSUFFIX).zip ufcst$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)libtar$(ZIPSUFFIX).zip ultar$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)rtl-console$(ZIPSUFFIX).zip urtlc$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)rtl-extra$(ZIPSUFFIX).zip urtle$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)rtl-objpas$(ZIPSUFFIX).zip urtlo$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)$(PKGUNITSPRE)rtl-unicode$(ZIPSUFFIX).zip urtlu$(ZIPSUFFIXSHORT).zip
# Sources only
        -mv $(PKGPRE)rtl$(ZIPSUFFIX).zip rtl$(ZIPSUFFIXSHORT).zip
        -mv $(PKGPRE)ide$(ZIPSUFFIX).zip ide$(ZIPSUFFIXSHORT).zip

shortsrc:
        $(MAKE) renametoshort ZIPSUFFIX=$(ZIPSOURCESUFFIX) ZIPSUFFIXSHORT=src

shortbin:
        $(MAKE) renametoshort ZIPSUFFIXSHORT=$(SHORTSUFFIX)

shortnames: shortsrc shortbin

# Build dir
ifndef BUILDDIR
BUILDDIR=$(BASEDIR)/build
endif

#
# Automatic detection if libgdb.a is present (logic copied from ide/Makefile.fpc)
#

ifndef NOGDB

# Try to find GDB library
# Look for a valid LIBGDBDIR environment variable
ifdef LIBGDBDIR
override LIBGDBFILE:=$(firstword $(wildcard $(addsuffix /libgdb.a,$(LIBGDBDIR))))
endif

# Use default dirs if not available
ifeq ($(LIBGDBFILE),)
# Default locations <target>/<cpu> (linux) or <target> (win32,go32v2) only
override GDBLIBDIR=$(wildcard fpcsrc/libgdb/$(OS_TARGET)/$(CPU_TARGET))
override LIBGDBDIR=fpcsrc/libgdb
ifeq ($(GDBLIBDIR),)
override GDBLIBDIR=fpcsrc/libgdb/$(OS_TARGET)
override LIBGDBDIR=fpcsrc/libgdb
endif
# Detect if libgdb.a is available
override LIBGDBFILE:=$(firstword $(wildcard $(addsuffix /libgdb.a,$(GDBLIBDIR))))
endif

# No custom libgdb.a found, try using system default library if available
ifeq ($(LIBGDBFILE),)
SYSLIBDIR=/lib /usr/lib /usr/local/lib
# Detect if libgdb.a is available
override LIBGDBFILE=$(firstword $(wildcard $(addsuffix /libgdb.a,$(SYSLIBDIR))))
ifneq (${LIBGDBFILE},)
$(warning Using system default libgdb file located in ${LIBGDBFILE})
override GDBLIBDIR=$(dir ${LIBGDBFILE})
override LIBGDBDIR=
endif
# Give an error when no libgdb.a found
ifeq ($(LIBGDBFILE),)
$(error No libgdb.a found, supply NOGDB=1 to disable debugger support)
endif
endif
endif  #NOGDB


##########################################################################
# Utilities (asld*.zip, make*.zip, gdb*.zip) for go32v2 and possibly os2
##########################################################################
.PHONY: utilities zip_util copy_utilfiles

UTILS_OUTDIR=$(INSTALL_PREFIX)/bin/$(TARGETSUFFIX)
ifeq ($(OS_TARGET),go32v2)
UTILS_BINSUFFIX=go32
else
UTILS_BINSUFFIX=$(SHORTSUFFIX)
endif

copy_utilfiles:
	$(MKDIRTREE) $(UTILS_OUTDIR)
	$(COPY) $(CVSINSTALL)/bin$(UTILS_BINSUFFIX)/$(UTILNAME)$(SHORTSUFFIX)/* $(UTILS_OUTDIR)

zip_util:
	$(MAKE) fpc_zipinstall ZIPTARGET=copy_utilfiles ZIPNAME=$(UTILNAME)

utilities:
	$(MAKE) zip_util UTILNAME=asld
	$(MAKE) zip_util UTILNAME=make
	$(MAKE) zip_util UTILNAME=gdb

##########################################################################
# Win32, Go32v2, OS/2
##########################################################################

.PHONY: dist

dist:
        $(MAKE) sourcezip
        $(MAKE) demozip
        $(MAKE) zipinstall
ifneq ($(findstring $(OS_TARGET),$(LIMIT83fs)),)
        $(MAKE) shortnames
endif

##########################################################################
# Debian
##########################################################################

ifeq ($(OS_TARGET),linux)

ifndef DEBDIR
DEBDIR=${CVSINSTALL}/debian
endif

ifneq ($(wildcard ${DEBDIR}/changelog),)

.PHONY: debcopy deb

DEBPACKAGEVERSION:=$(shell head -n 1 ${DEBDIR}/changelog | awk '{ print $$2 }' | tr -d '[()]')
DEBVERSION=$(firstword $(subst -, ,${DEBPACKAGEVERSION}))
DEBBUILD=$(lastword $(subst -, ,${DEBPACKAGEVERSION}))
DEBSRC=${PACKAGE_NAME}-${DEBVERSION}
DEBSRCDIR=${BUILDDIR}/${DEBSRC}
DEBSRC_ORIG=${PACKAGE_NAME}_${PACKAGE_VERSION}.orig
BUILDDATE=$(shell /bin/date --utc +%Y%m%d)
ifdef MENTORS
DEB_BUILDPKG_OPT=-sa
else
DEB_BUILDPKG_OPT=
endif
ifdef NODOCS
	DEB_BUILDPKG_OPT+= -B
endif
ifeq (${DEBBUILD},0)
DEBUSESVN=1
endif
ifeq (${DEBBUILD},1)
DEBUSESVN=1
endif
ifdef SNAPSHOT
DEBUSESVN=1
endif
ifndef SIGN
DEB_BUILDPKG_OPT+= -us -uc
endif

debcheck:
ifneq (${DEBVERSION},${PACKAGE_VERSION})
ifneq (${SNAPSHOT},1)
	! ${ECHO} "Debian version ($(DEBVERSION)) is not correct, expect $(PACKAGE_VERSION)"
endif
endif
ifeq ($(wildcard ${DEBSRC_ORIG}.tar.gz),)
ifndef DEBUSESVN
	! ${ECHO} 'Need "${DEBSRC_ORIG}.tar.gz" to build for DEBBUILD = "${DEBBUILD}" > 1'
endif
endif

debcopy: distclean
	${DELTREE} ${BUILDDIR}
	${MKDIRTREE} $(DEBSRCDIR)/fpcsrc
ifdef DEBUSESVN
	$(LINKTREE) fpcsrc/Makefile* $(DEBSRCDIR)/fpcsrc
	$(LINKTREE) fpcsrc/compiler $(DEBSRCDIR)/fpcsrc
	$(LINKTREE) fpcsrc/rtl $(DEBSRCDIR)/fpcsrc
	$(LINKTREE) fpcsrc/ide $(DEBSRCDIR)/fpcsrc
	$(LINKTREE) fpcsrc/installer $(DEBSRCDIR)/fpcsrc
	$(LINKTREE) fpcsrc/packages $(DEBSRCDIR)/fpcsrc
	$(LINKTREE) fpcsrc/tests $(DEBSRCDIR)/fpcsrc
	$(LINKTREE) fpcsrc/utils $(DEBSRCDIR)/fpcsrc
	$(LINKTREE) demo $(DEBSRCDIR)
ifneq (${LIBGDBDIR},)
	$(LINKTREE) $(LIBGDBDIR) $(DEBSRCDIR)/fpcsrc
endif
	$(LINKTREE) fpcdocs $(DEBSRCDIR)
	${MKDIR} $(DEBSRCDIR)/install
	$(LINKTREE) install/man $(DEBSRCDIR)/install
	$(LINKTREE) install/doc $(DEBSRCDIR)/install
else
	tar -C ${BUILDDIR} -zxf ${DEBSRC_ORIG}.tar.gz ${DEBSRC}
	${DELTREE} $(DEBSRCDIR)/debian
endif

debsetup:
	$(COPYTREE) ${DEBDIR} $(DEBSRCDIR)/debian
ifeq (${SNAPSHOT},1)
ifneq (${DEBVERSION},${PACKAGE_VERSION})
	sed -i ${DEBSRCDIR}/debian/changelog \
	-e "1ifpc (${PACKAGE_VERSION}-0~${BUILDDATE}) unstable; urgency=low" \
	-e "1i\ " \
	-e "1i  * Build daily snapshots." \
	-e "1i\ " \
	-e "1i -- Abou Al Montacir <abou.almontacir@sfr.fr>  $(shell date -R)" \
	-e "1i\ "
else
	sed -e 's/${DEBPACKAGEVERSION}/${DEBPACKAGEVERSION}~${BUILDDATE}/' -i $(DEBSRCDIR)/debian/changelog
endif
endif
	chmod 755 $(DEBSRCDIR)/debian/rules
	find $(DEBSRCDIR) -name '.svn' | xargs ${DELTREE}

debbuild:
	cd ${DEBSRCDIR} ; dpkg-buildpackage ${DEB_BUILDPKG_OPT}

debcheckpolicy:
ifdef LINTIAN
	cd ${DEBSRCDIR} ; lintian -I -i ../*.changes
endif

debclean:
ifndef DEBUSESVN
	${DEL} ${BUILDDIR}/${DEBSRC_ORIG}.tar.gz
endif
	mv -v -t . \
	$(DEBSRCDIR)/../*.changes \
	$(DEBSRCDIR)/../*.deb \
	$(DEBSRCDIR)/../*.dsc \
	$(DEBSRCDIR)/../*.gz
	${DELTREE} $(DEBSRCDIR)
	rmdir $(BUILDDIR)

deb: debcheck debcopy deborigtargz debsetup debbuild debcheckpolicy debclean

deborigtargz:
ifdef DEBUSESVN
	#$(MAKE) fpc_zipinstall USETAR=y ZIPTARGET=debcopy PACKDIR=$(DEBSRCDIR) FULLZIPNAME=${DEBSRC_ORIG}
	tar -C ${BUILDDIR} -zcf ${BUILDDIR}/${DEBSRC_ORIG}.tar.gz --exclude-vcs ${DEBSRC}
else
	${LINKTREE} ${DEBSRC_ORIG}.tar.gz ${BUILDDIR}/${DEBSRC_ORIG}.tar.gz
endif

endif   # changelog found

endif


##########################################################################
# RPM
##########################################################################

ifdef inUnix

# rpm available?
RPM:=$(strip $(wildcard $(addsuffix /rpm$(SRCEXEEXT),$(SEARCHPATH))))
ifneq ($(RPM),)

ifneq ($(wildcard $(CVSINSTALL)/fpc.spec),)

.PHONY: rpmcopy rpm

MINOR_PATCH:=$(shell echo $(PACKAGE_VERSION) | awk -F '.' '{ print substr($$3,2) }')
MAIN_VERSION:=$(shell echo $(PACKAGE_VERSION) | awk {'sub("[A-Z,a-z].*", ""); print'})
ifeq ($(MINOR_PATCH),)
RELEASE=1
else
RELEASE=0.$(MINOR_PATCH)
endif
# Only the recent rpms have rpmbuild
RPMBUILD=$(firstword $(strip $(wildcard $(addsuffix /rpmbuild,$(SEARCHPATH)))))
ifeq ($(RPMBUILD),)
RPMBUILD=$(firstword $(strip $(wildcard $(addsuffix /rpm,$(SEARCHPATH)))))
endif
RPMDIR=$(BUILDDIR)/rpm
RPMSPECFILE:=$(RPMDIR)/SPECS/fpc-$(PACKAGE_VERSION).spec
RPMSOURCEFILE:=$(RPMDIR)/SOURCES/fpc-$(PACKAGE_VERSION)-src.tar.gz
RPMSRCDIR:=$(RPMDIR)/SOURCES/fpc
RPMDEFINES=--define "_topdir $(RPMDIR)" \
           --define "_sourcedir $(RPMDIR)/SOURCES" \
           --define "_builddir $(RPMDIR)/BUILD" \
           --define "_rpmdir $(RPMDIR)/RPMS" \
           --define "_srcrpmdir $(RPMDIR)/SRPMS"
rpmcopy: distclean
        # false || is needed to workaround fpcmake sections
        false || [ -d $(RPMDIR) ] || install -d $(RPMDIR)
        false || [ -d $(RPMDIR)/BUILD ] || install -d $(RPMDIR)/BUILD
        false || [ -d $(RPMDIR)/SOURCES ] || install -d $(RPMDIR)/SOURCES
        false || [ -d $(RPMDIR)/SPECS ] || install -d $(RPMDIR)/SPECS
        false || [ -d $(RPMDIR)/RPMS ] || install -d $(RPMDIR)/RPMS
        false || [ -d $(RPMDIR)/SRPMS ] || install -d $(RPMDIR)/SRPMS
        rm -rf $(RPMSRCDIR)
        sed -e "s+%FPCVERSION%+$(MAIN_VERSION)+" -e "s+%MINOR_PATCH%+$(MINOR_PATCH)+" -e "s+%RELEASE%+$(RELEASE)+" $(CVSINSTALL)/fpc.spec > $(RPMSPECFILE)
ifndef NODOCS
        cat $(CVSINSTALL)/fpcdoc.spec >> $(RPMSPECFILE)
endif
        # Install files
        install -d $(RPMSRCDIR)
        $(LINKTREE) fpcsrc/compiler $(RPMSRCDIR)
        $(LINKTREE) fpcsrc/rtl $(RPMSRCDIR)
        $(LINKTREE) fpcsrc/ide $(RPMSRCDIR)
        $(LINKTREE) fpcsrc/packages $(RPMSRCDIR)
        $(LINKTREE) fpcsrc/utils $(RPMSRCDIR)
ifneq (${LIBGDBDIR},)
        $(LINKTREE) $(LIBGDBDIR) $(RPMSRCDIR)
endif
        $(LINKTREE) demo $(RPMSRCDIR)
#        $(LINKTREE) logs $(RPMSRCDIR)
        $(LINKTREE) fpcsrc/Makefile* $(RPMSRCDIR)
        $(LINKTREE) $(CVSINSTALL)/man $(RPMSRCDIR)
        $(LINKTREE) $(CVSINSTALL)/doc $(RPMSRCDIR)
        $(COPY) $(CVSINSTALL)/smart_strip.sh $(RPMSRCDIR)
        chmod +x $(RPMSRCDIR)/smart_strip.sh
ifndef NODOCS
        $(LINKTREE) fpcdocs $(RPMSRCDIR)
endif
        find $(RPMSRCDIR) -name 'CVS*' | xargs -n1 rm -rf
        find $(RPMSRCDIR) -name '.svn' | xargs -n1 rm -rf
        cd $(RPMSRCDIR) ; tar cfvz $(RPMSOURCEFILE) *
        rm -rf $(RPMSRCDIR)

rpmbuild: checkfpcdir
        $(RPMBUILD) $(RPMDEFINES) --nodeps -ba $(RPMSPECFILE)
        mv `find $(RPMDIR)/RPMS/ -name '*.rpm'` .
        mv `find $(RPMDIR)/SRPMS/ -name '*.rpm'` .

rpmclean:
        rm -rf $(RPMDIR)
        -rmdir $(BUILDDIR)

rpm: checkfpcdir rpmcopy rpmbuild rpmclean

endif   # spec found

endif   # rpm available

endif   # inUnix

##########################################################################
# Open Watcom detection
##########################################################################

ifeq ($(CPU_TARGET),i8086)
WLINK:=$(strip $(wildcard $(addsuffix /wlink.exe,$(SEARCHPATH))))
ifeq ($(WLINK),)
WLINK:=$(strip $(wildcard $(addsuffix /wlink,$(SEARCHPATH))))
endif
ifeq ($(WLINK),)
$(error You need an installation of Open Watcom in order to build this platform)
endif
endif

##########################################################################
# Android NDK
##########################################################################

ifeq ($(OS_TARGET),android)
ifneq ($(CPU_TARGET),jvm)

ifeq ($(NDK),)
  $(error It is needed to set the Android NDK path using NDK=<path>)
endif
override NDK:=$(subst $(PATHSEP),/,$(NDK))

ifeq ($(wildcard $(NDK)),)
  $(error NDK path does not exist: $(NDK))
endif

NDKARCH:=windows
gettoolchain=$(dir $(firstword $(foreach d, $(wildcard $(NDK)/toolchains/$(1)-*.*), $(wildcard $(d)/prebuilt/$(NDKARCH)/bin/$(2)-as$(SRCEXEEXT)))))

ANDROID_ARM_BINUTILS:=$(call gettoolchain,arm-linux-androideabi,arm-linux-androideabi)
ifeq ($(ANDROID_ARM_BINUTILS),)
  WINARCH:=$(PROCESSOR_ARCHITEW6432)
  ifeq ($(WINARCH),)
    WINARCH:=$(PROCESSOR_ARCHITECTURE)
  endif
  ifeq ($(WINARCH),AMD64)
    NDKARCH:=windows-x86_64
    ANDROID_ARM_BINUTILS:=$(call gettoolchain,arm-linux-androideabi,arm-linux-androideabi)
  endif
  ifeq ($(ANDROID_ARM_BINUTILS),)
    $(error Unable to find binutils for arm-android)
  endif
endif

ANDROID_X86_BINUTILS:=$(call gettoolchain,x86,i686-linux-android)
ifeq ($(ANDROID_X86_BINUTILS),)
  $(error Unable to find binutils for i386-android)
endif

ANDROID_MIPS_BINUTILS:=$(call gettoolchain,mipsel-linux-android,mipsel-linux-android)
ifeq ($(ANDROID_MIPS_BINUTILS),)
  $(error Unable to find binutils for mipsel-android)
endif

NDK_LIB:=$(NDK)/platforms/android-9
ifeq ($(wildcard $(NDK_LIB)/arch-x86/usr/lib/crtbegin_so.o),)
  $(error Unable to find NDK library files in $(NDK_LIB))
endif

unexport BUILDFULLNATIVE

endif
endif

##########################################################################
# Inno setup
##########################################################################

ifndef ISCCPROG
ISCCPROG=$(subst $(PATHSEP),/,$(ProgramFiles))/inno setup 5/iscc.exe
endif # ISCCPROG

ifndef inUnix
USEINNOWRAPPER=1
endif
INNODIR=$(BUILDDIR)/inno
INNOWRAPPER=$(subst /,$(PATHSEP),$(DIST_DESTDIR)/fpcinno$(SRCBATCHEXT))
INNOCMD_CDINNO:=cd $(subst /,$(ZIPPATHSEP),$(INNODIR))
INNOCMD_CDBASE:=cd $(subst /,$(ZIPPATHSEP),$(BASEDIR))
INNOCMD_ISCC:="$(ISCCPROG)" "$(subst /,$(PATHSEP),$(INNODIR)/fpc.iss)"
FPCISSSUBST=-d BUILDDIR=$(subst /,$(PATHSEP),$(INNODIR))
ifdef NODOCS
FPCISSSUBST+=-d DisableDocs=;
endif

innocheck:
ifndef NODOCS
# Check for doc-pdf.zip
ifeq ($(wildcard doc-pdf.zip),)
        @$(ECHO) "No documentation available. Please copy the file doc-pdf.zip to this directory."
        @exit 1
endif
endif
ifndef NOGDB
# Check for libgdb
ifeq ($(wildcard fpcsrc/libgdb/win32/libgdb.a),)
ifeq ($(wildcard fpcsrc/libgdb/win32/i386/libgdb.a),)
        @$(ECHO) "Libgdb not available. Please get and unzip libgdb-*.i386-win32.zip in fpcsrc/."
        @exit 1
endif
endif
endif

innobuild: innocheck build
        rmcvsdir$(EXEEXT) $(INNODIR)
        $(DELTREE) $(INNODIR)
        $(MKDIR) $(INNODIR)
        $(COPYTREE) demo $(INNODIR)
        $(COPYTREE) install/unicode $(INNODIR)
ifndef NODOCS
        unzip -d $(INNODIR) doc-pdf.zip
endif
        $(MAKE) install INSTALL_PREFIX=$(INNODIR)
        rmcvsdir$(EXEEXT) $(INNODIR)
        fpcmkcfg -t install/fpc.ist -o $(INNODIR)/fpc.iss $(FPCISSSUBST) -d FPCVERSION=$(PACKAGE_VERSION)
        $(INNOCMD_ISCC)
        $(MOVE) $(INNODIR)/Output/setup.exe fpc-$(PACKAGE_VERSION).$(FULL_TARGET).exe

innocebuild: innocheck buildce
        rmcvsdir$(EXEEXT) $(INNODIR)
        $(DELTREE) $(INNODIR)
        $(MKDIR) $(INNODIR)
        $(COPYTREE) demo $(INNODIR)
        $(MAKE) crossinstall INSTALL_PREFIX=$(INNODIR) OS_TARGET=wince CPU_TARGET=arm
        rmcvsdir$(EXEEXT) $(INNODIR)
        fpcmkcfg -t install/fpcce.ist -o $(INNODIR)/fpcce.iss $(FPCISSSUBST) -d FPCVERSION=$(PACKAGE_VERSION)
        "$(ISCCPROG)" $(INNODIR)/fpcce.iss
        $(MOVE) $(INNODIR)/Output/setup.exe fpc-$(PACKAGE_VERSION).$(FULL_SOURCE).cross.$(FULL_TARGET).exe

innox64build: innocheck buildx64
        rmcvsdir$(EXEEXT) $(INNODIR)
        $(DELTREE) $(INNODIR)
        $(MKDIR) $(INNODIR)
        $(COPYTREE) demo $(INNODIR)
        $(MAKE) crossinstall INSTALL_PREFIX=$(INNODIR) OS_TARGET=win64 CPU_TARGET=x86_64
        rmcvsdir$(EXEEXT) $(INNODIR)
        fpcmkcfg -t install/fpcx64.ist -o $(INNODIR)/fpcx64.iss $(FPCISSSUBST) -d FPCVERSION=$(PACKAGE_VERSION)
        "$(ISCCPROG)" $(INNODIR)/fpcx64.iss
        $(MOVE) $(INNODIR)/Output/setup.exe fpc-$(PACKAGE_VERSION).$(FULL_SOURCE).cross.$(FULL_TARGET).exe
		
innojvmbuild: innocheck buildjvm
        rmcvsdir$(EXEEXT) $(INNODIR)
        $(DELTREE) $(INNODIR)
        $(MKDIR) $(INNODIR)
# currently, jvm supports only buildbase, so we have to use installbase here		
        $(MAKE) installbase INSTALL_PREFIX=$(INNODIR) OS_TARGET=java CPU_TARGET=jvm
        $(MAKE) installbase INSTALL_PREFIX=$(INNODIR) OS_TARGET=android CPU_TARGET=jvm
        rmcvsdir$(EXEEXT) $(INNODIR)
        fpcmkcfg -t install/fpcjvm.ist -o $(INNODIR)/fpcjvm.iss $(FPCISSSUBST) -d FPCVERSION=$(PACKAGE_VERSION)
        "$(ISCCPROG)" $(INNODIR)/fpcjvm.iss
        $(MOVE) $(INNODIR)/Output/setup.exe fpc-$(PACKAGE_VERSION).$(FULL_SOURCE).cross.$(CPU_TARGET).exe

buildmsdos_subarch_mm:
        $(MAKE) -C fpcsrc clean buildbase OS_SOURCE=win32 CPU_SOURCE=i386 OS_TARGET=msdos CPU_TARGET=i8086 OPT="-CX -XXs" BINUTILSPREFIX= CROSSOPT="-Wm$(MEMORY_MODEL) -Cp$(SUBARCH)"
        $(MAKE) install CROSSINSTALL=1 INSTALL_PREFIX=$(INNODIR) OS_TARGET=msdos CPU_TARGET=i8086 OPT="-CX -XXs" BINUTILSPREFIX= CROSSOPT="-Wm$(MEMORY_MODEL) -Cp$(SUBARCH)"
		$(MOVE) $(INNODIR)/units/msdos $(INNODIR)/units/msdos_/$(SUBARCH)-$(MEMORY_MODEL)

buildmsdos_subarch:
        $(MAKE) buildmsdos_subarch_mm MEMORY_MODEL=tiny
        $(MAKE) buildmsdos_subarch_mm MEMORY_MODEL=small
        $(MAKE) buildmsdos_subarch_mm MEMORY_MODEL=medium
        $(MAKE) buildmsdos_subarch_mm MEMORY_MODEL=compact
        $(MAKE) buildmsdos_subarch_mm MEMORY_MODEL=large

innomsdosbuild: innocheck
        rmcvsdir$(EXEEXT) $(INNODIR)
        $(DELTREE) $(INNODIR)
        $(MKDIR) $(INNODIR)
        $(COPYTREE) demo $(INNODIR)
        $(MKDIR) $(INNODIR)/units/msdos_
        $(MAKE) buildmsdos_subarch SUBARCH=8086
        $(MAKE) buildmsdos_subarch SUBARCH=80186
        $(MAKE) buildmsdos_subarch SUBARCH=80286
		$(MOVE) $(INNODIR)/units/msdos_ $(INNODIR)/units/msdos
        rmcvsdir$(EXEEXT) $(INNODIR)
        fpcsubst -i install/fpcmsdos.ist -o $(INNODIR)/fpcmsdos.iss $(FPCISSSUBST) -d FPCVERSION=$(PACKAGE_VERSION)
        "$(ISCCPROG)" $(INNODIR)/fpcmsdos.iss
        $(MOVE) $(INNODIR)/Output/setup.exe fpc-$(PACKAGE_VERSION).$(FULL_SOURCE).cross.$(FULL_TARGET).exe

innoandroidbuild:
        $(MAKE) build_android_arm OS_TARGET=android CPU_TARGET=arm
        $(MAKE) build_android_i386 OS_TARGET=android CPU_TARGET=i386
        $(MAKE) build_android_mipsel OS_TARGET=android CPU_TARGET=mipsel
        rmcvsdir$(EXEEXT) $(INNODIR)
        $(DELTREE) $(INNODIR)
        $(MKDIR) $(INNODIR)
        $(COPYTREE) demo $(INNODIR)
        $(MAKE) crossinstall INSTALL_PREFIX=$(INNODIR) OS_TARGET=android CPU_TARGET=arm
        $(MAKE) crossinstall INSTALL_PREFIX=$(INNODIR) OS_TARGET=android CPU_TARGET=i386
        $(MAKE) crossinstall INSTALL_PREFIX=$(INNODIR) OS_TARGET=android CPU_TARGET=mipsel
        rmcvsdir$(EXEEXT) $(INNODIR)
        fpcmkcfg -t install/fpcandroid.ist -o $(INNODIR)/fpcandroid.iss $(FPCISSSUBST) -d FPCVERSION=$(PACKAGE_VERSION)
        "$(ISCCPROG)" $(INNODIR)/fpcandroid.iss
        $(MOVE) $(INNODIR)/Output/setup.exe fpc-$(PACKAGE_VERSION).$(FULL_SOURCE).cross.android.exe

innoclean:
        rmcvsdir$(EXEEXT) $(INNODIR)
        $(DELTREE) $(INNODIR)

innoce : checkfpcdir
		$(MAKE) OS_TARGET=wince CPU_TARGET=arm innocebuild NOGDB=1
		$(MAKE) innoclean	

innox64 : checkfpcdir
		$(MAKE) OS_TARGET=win64 CPU_TARGET=x86_64 innox64build NOGDB=1
        $(MAKE) innoclean	

innojvm : checkfpcdir
		$(MAKE) OS_TARGET=java CPU_TARGET=jvm innojvmbuild NOGDB=1
		$(MAKE) innoclean	

innomsdos : checkfpcdir
	$(MAKE) OS_TARGET=msdos CPU_TARGET=i8086 innomsdosbuild NOGDB=1 CROSSBINDIR=$(BASEDIR)/install/crossbinmsdos
        $(MAKE) innoclean	

innoandroid : checkfpcdir
		$(MAKE) OS_TARGET=android CPU_TARGET=arm innoandroidbuild NOGDB=1
		$(MAKE) innoclean

inno: checkfpcdir innobuild innoclean
