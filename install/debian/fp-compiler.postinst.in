#! /bin/sh

set -e

# Load debconf
. /usr/share/debconf/confmodule

CFG_PATH='/etc/fpc.cfg'
PKG_CFG_PATH="/etc/fpc-${VERSION}.cfg"
LIB_DIR="/usr/lib/${DEB_HOST_MULTIARCH}/fpc"
MAN_DIR="/usr/share/man/man1"
MKCFG="/usr/bin/${DEB_HOST_MULTIARCH}-fpcmkcfg-${VERSION}"

# Debhelper code
#DEBHELPER#

USER_HAS_ENABLED_NEW_CONF="test -L ${CFG_PATH} -o  ! -e ${CFG_PATH}"

if ! ${USER_HAS_ENABLED_NEW_CONF}
then
	db_get fp-compiler/rename_cfg
	if test "${RET}" = "true" -a -e ${CFG_PATH}
	then
		mv "${CFG_PATH}" "${CFG_PATH}.bak"
	fi
fi

# Create new compiler configuration file
${MKCFG} -0 -d "basepath=${LIB_DIR}/\$fpcversion" -o "${PKG_CFG_PATH}"
# Add multiarch path to /etc/fpc.cfg so executables linked against libc can be corectly linked
echo '# multiarch library search path' >> ${PKG_CFG_PATH}
echo '-Fl/usr/lib/$fpctarget-*' >> ${PKG_CFG_PATH}
# Define a default location, multi-arch compatible, for third party units.
cat >> ${PKG_CFG_PATH} <<EOF

# Third party units should be installe into a multi-arch compatible location.
# A recommended location is /usr/lib/\$fpctarget-gnu/\$pkg/fp-units/${VERSION}/.
# Ech fp-units-\$pkg package should install a configuration file called \$pkg in
# /etc/fpc-\$fpcversion.cfg.d so that it can be used for compilation as follows:
#     fpc [@\$pkg1 [@\$pkg2 [@$\$pkg3]]] <fpc options> progname
#
# The directive CFGDIR allows looking for @\$pkg in the specified location.

#CFGDIR /etc/fpc-\$fpcversion.cfg.d
EOF

case "$1" in
	configure)
		# Nothing to do
	;;

	triggered)
		# We were called after trigger was fired. Stop here then!
		exit 0
	;;

	abort-upgrade | abort-remove | abort-deconfigure)
		# Nothing to do
	;;

	*)
		echo "Post installation script called with unknown argument '$1'!" >&2
		exit 1
	;;
esac

if test -n ${WINDRES_BIN}
then
	db_get fp-compiler/windres
	if test -n "${RET}"
	then
		WINDRES_BIN=${RET}
	fi
fi
sed -e '\@# MS Windows .rc resource compiler@d' -e '\@-FC@d' -i  ${PKG_CFG_PATH}
if test -n "${WINDRES_BIN}"
then
	echo '# MS Windows .rc resource compiler' >> ${PKG_CFG_PATH}
	echo "-FC${WINDRES_BIN}" >> ${PKG_CFG_PATH}
fi

# add alternatives
update-alternatives \
    --install /usr/bin/fpc fpc /usr/bin/${DEB_HOST_MULTIARCH}-fpc-${VERSION} ${PRIORITY} \
    --slave /usr/bin/${PPCBIN} ${PPCBIN} ${LIB_DIR}/${VERSION}/${PPCBIN} \
    --slave /usr/bin/fpc-depends fpc-depends /usr/bin/fpc-depends-${VERSION} \
	--slave /usr/bin/fpcres fpcres /usr/bin/${DEB_HOST_MULTIARCH}-fpcres-${VERSION} \
	--slave /usr/bin/fpcmkcfg fpcmkcfg /usr/bin/${DEB_HOST_MULTIARCH}-fpcmkcfg-${VERSION} \
	--slave /usr/bin/samplecfg samplecfg /usr/lib/${DEB_HOST_MULTIARCH}/fpc/${VERSION}/samplecfg \
    --slave ${MAN_DIR}/${PPCBIN}.1.gz ${PPCBIN}.1.gz ${MAN_DIR}/${PPCBIN}-${VERSION}.1.gz \
    --slave ${MAN_DIR}/fpc.1.gz fpc.1.gz ${MAN_DIR}/fpc-${VERSION}.1.gz \
    --slave ${MAN_DIR}/fpc-depends.1.gz fpc-depends.1.gz ${MAN_DIR}/fpc-depends-${VERSION}.1.gz \
	--slave ${MAN_DIR}/fpcres.1.gz fpcres.1.gz ${MAN_DIR}/fpcres-${VERSION}.1.gz \
	--slave ${MAN_DIR}/fpcmkcfg.1.gz fpcmkcfg.1.gz ${MAN_DIR}/fpcmkcfg-${VERSION}.1.gz
# Configuration file is a special case as it is backward compatible and is
# likely to be handled as a special alternative pointing to the latest release
if ${USER_HAS_ENABLED_NEW_CONF}
then
	update-alternatives \
		--install ${CFG_PATH} fpc.cfg ${PKG_CFG_PATH} ${PRIORITY}
fi
# Replace legacy/gnu pascal compilers
update-alternatives \
    --install /usr/bin/pc pc /usr/bin/fpc 20 \
    --slave ${MAN_DIR}/pc.1.gz pc.1.gz ${MAN_DIR}/fpc.1.gz
