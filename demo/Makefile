#
# Don't edit, this file is generated by FPCMake Version 2.0.0 [2017-02-13 rev 35434]
#
default: all
MAKEFILETARGETS=i386-linux i386-go32v2 i386-win32 i386-os2 i386-freebsd i386-beos i386-haiku i386-netbsd i386-solaris i386-qnx i386-netware i386-openbsd i386-wdosx i386-darwin i386-emx i386-watcom i386-netwlibc i386-wince i386-embedded i386-symbian i386-nativent i386-iphonesim i386-android i386-aros m68k-linux m68k-freebsd m68k-netbsd m68k-amiga m68k-atari m68k-openbsd m68k-palmos m68k-embedded powerpc-linux powerpc-netbsd powerpc-amiga powerpc-macos powerpc-darwin powerpc-morphos powerpc-embedded powerpc-wii powerpc-aix sparc-linux sparc-netbsd sparc-solaris sparc-embedded x86_64-linux x86_64-freebsd x86_64-netbsd x86_64-solaris x86_64-openbsd x86_64-darwin x86_64-win64 x86_64-embedded x86_64-dragonfly arm-linux arm-palmos arm-darwin arm-wince arm-gba arm-nds arm-embedded arm-symbian arm-android powerpc64-linux powerpc64-darwin powerpc64-embedded powerpc64-aix avr-embedded armeb-linux armeb-embedded mips-linux mipsel-linux mipsel-embedded mipsel-android jvm-java jvm-android i8086-msdos
BSDs = freebsd netbsd openbsd darwin dragonfly
UNIXs = linux $(BSDs) solaris qnx haiku aix
LIMIT83fs = go32v2 os2 emx watcom msdos
OSNeedsComspecToRunBatch = go32v2 watcom
FORCE:
.PHONY: FORCE
override PATH:=$(patsubst %/,%,$(subst \,/,$(PATH)))
ifneq ($(findstring darwin,$(OSTYPE)),)
inUnix=1 #darwin
SEARCHPATH:=$(filter-out .,$(subst :, ,$(PATH)))
else
ifeq ($(findstring ;,$(PATH)),)
inUnix=1
SEARCHPATH:=$(filter-out .,$(subst :, ,$(PATH)))
else
SEARCHPATH:=$(subst ;, ,$(PATH))
endif
endif
SEARCHPATH+=$(patsubst %/,%,$(subst \,/,$(dir $(MAKE))))
PWD:=$(strip $(wildcard $(addsuffix /pwd.exe,$(SEARCHPATH))))
ifeq ($(PWD),)
PWD:=$(strip $(wildcard $(addsuffix /pwd,$(SEARCHPATH))))
ifeq ($(PWD),)
$(error You need the GNU utils package to use this Makefile)
else
PWD:=$(firstword $(PWD))
SRCEXEEXT=
endif
else
PWD:=$(firstword $(PWD))
SRCEXEEXT=.exe
endif
ifndef inUnix
ifeq ($(OS),Windows_NT)
inWinNT=1
else
ifdef OS2_SHELL
inOS2=1
endif
endif
else
ifneq ($(findstring cygdrive,$(PATH)),)
inCygWin=1
endif
endif
ifdef inUnix
SRCBATCHEXT=.sh
else
ifdef inOS2
SRCBATCHEXT=.cmd
else
SRCBATCHEXT=.bat
endif
endif
ifdef COMSPEC
ifneq ($(findstring $(OS_SOURCE),$(OSNeedsComspecToRunBatch)),)
ifndef RUNBATCH
RUNBATCH=$(COMSPEC) /C
endif
endif
endif
ifdef inUnix
PATHSEP=/
else
PATHSEP:=$(subst /,\,/)
ifdef inCygWin
PATHSEP=/
endif
endif
ifdef PWD
BASEDIR:=$(subst \,/,$(shell $(PWD)))
ifdef inCygWin
ifneq ($(findstring /cygdrive/,$(BASEDIR)),)
BASENODIR:=$(patsubst /cygdrive%,%,$(BASEDIR))
BASEDRIVE:=$(firstword $(subst /, ,$(BASENODIR)))
BASEDIR:=$(subst /cygdrive/$(BASEDRIVE)/,$(BASEDRIVE):/,$(BASEDIR))
endif
endif
else
BASEDIR=.
endif
ifdef inOS2
ifndef ECHO
ECHO:=$(strip $(wildcard $(addsuffix /gecho$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO:=$(strip $(wildcard $(addsuffix /echo$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO=echo
else
ECHO:=$(firstword $(ECHO))
endif
else
ECHO:=$(firstword $(ECHO))
endif
endif
export ECHO
endif
override DEFAULT_FPCDIR=../fpcsrc
ifndef FPC
ifdef PP
FPC=$(PP)
endif
endif
ifndef FPC
FPCPROG:=$(strip $(wildcard $(addsuffix /fpc$(SRCEXEEXT),$(SEARCHPATH))))
ifneq ($(FPCPROG),)
FPCPROG:=$(firstword $(FPCPROG))
ifneq ($(CPU_TARGET),)
FPC:=$(shell $(FPCPROG) -P$(CPU_TARGET) -PB)
else
FPC:=$(shell $(FPCPROG) -PB)
endif
ifneq ($(findstring Error,$(FPC)),)
override FPC=$(firstword $(strip $(wildcard $(addsuffix /ppc386$(SRCEXEEXT),$(SEARCHPATH)))))
else
ifeq ($(strip $(wildcard $(FPC))),)
FPC:=$(firstword $(FPCPROG))
endif
endif
else
override FPC=$(firstword $(strip $(wildcard $(addsuffix /ppc386$(SRCEXEEXT),$(SEARCHPATH)))))
endif
endif
override FPC:=$(subst $(SRCEXEEXT),,$(FPC))
override FPC:=$(subst \,/,$(FPC))$(SRCEXEEXT)
FOUNDFPC:=$(strip $(wildcard $(FPC)))
ifeq ($(FOUNDFPC),)
FOUNDFPC=$(strip $(wildcard $(addsuffix /$(FPC),$(SEARCHPATH))))
ifeq ($(FOUNDFPC),)
$(error Compiler $(FPC) not found)
endif
endif
ifndef FPC_COMPILERINFO
FPC_COMPILERINFO:=$(shell $(FPC) -iVSPTPSOTO)
endif
ifndef FPC_VERSION
FPC_VERSION:=$(word 1,$(FPC_COMPILERINFO))
endif
export FPC FPC_VERSION FPC_COMPILERINFO
unexport CHECKDEPEND ALLDEPENDENCIES
ifndef CPU_TARGET
ifdef CPU_TARGET_DEFAULT
CPU_TARGET=$(CPU_TARGET_DEFAULT)
endif
endif
ifndef OS_TARGET
ifdef OS_TARGET_DEFAULT
OS_TARGET=$(OS_TARGET_DEFAULT)
endif
endif
ifndef CPU_SOURCE
CPU_SOURCE:=$(word 2,$(FPC_COMPILERINFO))
endif
ifndef CPU_TARGET
CPU_TARGET:=$(word 3,$(FPC_COMPILERINFO))
endif
ifndef OS_SOURCE
OS_SOURCE:=$(word 4,$(FPC_COMPILERINFO))
endif
ifndef OS_TARGET
OS_TARGET:=$(word 5,$(FPC_COMPILERINFO))
endif
FULL_TARGET=$(CPU_TARGET)-$(OS_TARGET)
FULL_SOURCE=$(CPU_SOURCE)-$(OS_SOURCE)
ifeq ($(CPU_TARGET),armeb)
ARCH=arm
override FPCOPT+=-Cb
else
ifeq ($(CPU_TARGET),armel)
ARCH=arm
override FPCOPT+=-CaEABI
else
ARCH=$(CPU_TARGET)
endif
endif
ifeq ($(FULL_TARGET),arm-embedded)
ifeq ($(SUBARCH),)
$(error When compiling for arm-embedded, a sub-architecture (e.g. SUBARCH=armv4t or SUBARCH=armv7m) must be defined)
endif
override FPCOPT+=-Cp$(SUBARCH)
endif
ifeq ($(FULL_TARGET),mipsel-embedded)
ifeq ($(SUBARCH),)
$(error When compiling for mipsel-embedded, a sub-architecture (e.g. SUBARCH=pic32mx) must be defined)
endif
override FPCOPT+=-Cp$(SUBARCH)
endif
ifneq ($(findstring $(OS_SOURCE),$(LIMIT83fs)),)
TARGETSUFFIX=$(OS_TARGET)
SOURCESUFFIX=$(OS_SOURCE)
else
ifneq ($(findstring $(OS_TARGET),$(LIMIT83fs)),)
TARGETSUFFIX=$(OS_TARGET)
else
TARGETSUFFIX=$(FULL_TARGET)
endif
SOURCESUFFIX=$(FULL_SOURCE)
endif
ifneq ($(FULL_TARGET),$(FULL_SOURCE))
CROSSCOMPILE=1
endif
ifeq ($(findstring makefile,$(MAKECMDGOALS)),)
ifeq ($(findstring $(FULL_TARGET),$(MAKEFILETARGETS)),)
$(error The Makefile doesn't support target $(FULL_TARGET), please run fpcmake first)
endif
endif
ifneq ($(findstring $(OS_TARGET),$(BSDs)),)
BSDhier=1
endif
ifeq ($(OS_TARGET),linux)
linuxHier=1
endif
ifndef CROSSCOMPILE
BUILDFULLNATIVE=1
export BUILDFULLNATIVE
endif
ifdef BUILDFULLNATIVE
BUILDNATIVE=1
export BUILDNATIVE
endif
export OS_TARGET OS_SOURCE ARCH CPU_TARGET CPU_SOURCE FULL_TARGET FULL_SOURCE TARGETSUFFIX SOURCESUFFIX CROSSCOMPILE
ifdef FPCDIR
override FPCDIR:=$(subst \,/,$(FPCDIR))
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR=wrong
endif
else
override FPCDIR=wrong
endif
ifdef DEFAULT_FPCDIR
ifeq ($(FPCDIR),wrong)
override FPCDIR:=$(subst \,/,$(DEFAULT_FPCDIR))
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR=wrong
endif
endif
endif
ifeq ($(FPCDIR),wrong)
ifdef inUnix
override FPCDIR=/usr/local/lib/fpc/$(FPC_VERSION)
ifeq ($(wildcard $(FPCDIR)/units),)
override FPCDIR=/usr/lib/fpc/$(FPC_VERSION)
endif
else
override FPCDIR:=$(subst /$(FPC),,$(firstword $(strip $(wildcard $(addsuffix /$(FPC),$(SEARCHPATH))))))
override FPCDIR:=$(FPCDIR)/..
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR:=$(FPCDIR)/..
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR:=$(BASEDIR)
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR=c:/pp
endif
endif
endif
endif
endif
ifndef CROSSBINDIR
CROSSBINDIR:=$(wildcard $(FPCDIR)/bin/$(TARGETSUFFIX))
endif
ifneq ($(findstring $(OS_TARGET),darwin iphonesim),)
ifeq ($(OS_SOURCE),darwin)
DARWIN2DARWIN=1
endif
endif
ifndef BINUTILSPREFIX
ifndef CROSSBINDIR
ifdef CROSSCOMPILE
ifneq ($(OS_TARGET),msdos)
ifndef DARWIN2DARWIN
ifneq ($(CPU_TARGET),jvm)
BINUTILSPREFIX=$(CPU_TARGET)-$(OS_TARGET)-
ifeq ($(OS_TARGET),android)
ifeq ($(CPU_TARGET),arm)
BINUTILSPREFIX=arm-linux-androideabi-
else
ifeq ($(CPU_TARGET),i386)
BINUTILSPREFIX=i686-linux-android-
else
ifeq ($(CPU_TARGET),mipsel)
BINUTILSPREFIX=mipsel-linux-android-
endif
endif
endif
endif
endif
endif
else
BINUTILSPREFIX=$(OS_TARGET)-
endif
endif
endif
endif
UNITSDIR:=$(wildcard $(FPCDIR)/units/$(TARGETSUFFIX))
ifeq ($(UNITSDIR),)
UNITSDIR:=$(wildcard $(FPCDIR)/units/$(OS_TARGET))
endif
PACKAGESDIR:=$(wildcard $(FPCDIR) $(FPCDIR)/packages $(FPCDIR)/packages/base $(FPCDIR)/packages/extra)
ifndef FPCFPMAKE
ifdef CROSSCOMPILE
ifeq ($(strip $(wildcard $(addsuffix /compiler/ppc$(SRCEXEEXT),$(FPCDIR)))),)
FPCPROG:=$(strip $(wildcard $(addsuffix /fpc$(SRCEXEEXT),$(SEARCHPATH))))
ifneq ($(FPCPROG),)
FPCPROG:=$(firstword $(FPCPROG))
FPCFPMAKE:=$(shell $(FPCPROG) -PB)
ifeq ($(strip $(wildcard $(FPCFPMAKE))),)
FPCFPMAKE:=$(firstword $(FPCPROG))
endif
else
override FPCFPMAKE=$(firstword $(strip $(wildcard $(addsuffix /ppc386$(SRCEXEEXT),$(SEARCHPATH)))))
endif
else
FPCFPMAKE=$(strip $(wildcard $(addsuffix /compiler/ppc$(SRCEXEEXT),$(FPCDIR))))
FPMAKE_SKIP_CONFIG=-n
export FPCFPMAKE
export FPMAKE_SKIP_CONFIG
endif
else
FPMAKE_SKIP_CONFIG=-n
FPCFPMAKE=$(FPC)
endif
endif
override PACKAGE_NAME=demo
override PACKAGE_VERSION=3.0.4
ifeq ($(FULL_TARGET),i386-linux)
override TARGET_DIRS+=text  linux unix graph lister
endif
ifeq ($(FULL_TARGET),i386-go32v2)
override TARGET_DIRS+=text  modex graph
endif
ifeq ($(FULL_TARGET),i386-win32)
override TARGET_DIRS+=text  win32 graph lister
endif
ifeq ($(FULL_TARGET),i386-os2)
override TARGET_DIRS+=text  os2 lister graph
endif
ifeq ($(FULL_TARGET),i386-freebsd)
override TARGET_DIRS+=text  freebsd unix graph lister
endif
ifeq ($(FULL_TARGET),i386-beos)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),i386-haiku)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),i386-netbsd)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),i386-solaris)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),i386-qnx)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),i386-netware)
override TARGET_DIRS+=text  netware
endif
ifeq ($(FULL_TARGET),i386-openbsd)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),i386-wdosx)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),i386-darwin)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),i386-emx)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),i386-watcom)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),i386-netwlibc)
override TARGET_DIRS+=text  netwlibc
endif
ifeq ($(FULL_TARGET),i386-wince)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),i386-embedded)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),i386-symbian)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),i386-nativent)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),i386-iphonesim)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),i386-android)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),i386-aros)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),m68k-linux)
override TARGET_DIRS+=text  linux unix graph lister
endif
ifeq ($(FULL_TARGET),m68k-freebsd)
override TARGET_DIRS+=text  freebsd unix graph lister
endif
ifeq ($(FULL_TARGET),m68k-netbsd)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),m68k-amiga)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),m68k-atari)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),m68k-openbsd)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),m68k-palmos)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),m68k-embedded)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),powerpc-linux)
override TARGET_DIRS+=text  linux unix graph lister
endif
ifeq ($(FULL_TARGET),powerpc-netbsd)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),powerpc-amiga)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),powerpc-macos)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),powerpc-darwin)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),powerpc-morphos)
override TARGET_DIRS+=text  morphos
endif
ifeq ($(FULL_TARGET),powerpc-embedded)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),powerpc-wii)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),powerpc-aix)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),sparc-linux)
override TARGET_DIRS+=text  linux unix graph lister
endif
ifeq ($(FULL_TARGET),sparc-netbsd)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),sparc-solaris)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),sparc-embedded)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),x86_64-linux)
override TARGET_DIRS+=text  linux unix graph lister
endif
ifeq ($(FULL_TARGET),x86_64-freebsd)
override TARGET_DIRS+=text  freebsd unix graph lister
endif
ifeq ($(FULL_TARGET),x86_64-netbsd)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),x86_64-solaris)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),x86_64-openbsd)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),x86_64-darwin)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),x86_64-win64)
override TARGET_DIRS+=text  win32 graph lister
endif
ifeq ($(FULL_TARGET),x86_64-embedded)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),x86_64-dragonfly)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),arm-linux)
override TARGET_DIRS+=text  linux unix graph lister
endif
ifeq ($(FULL_TARGET),arm-palmos)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),arm-darwin)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),arm-wince)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),arm-gba)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),arm-nds)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),arm-embedded)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),arm-symbian)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),arm-android)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),powerpc64-linux)
override TARGET_DIRS+=text  linux unix graph lister
endif
ifeq ($(FULL_TARGET),powerpc64-darwin)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),powerpc64-embedded)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),powerpc64-aix)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),avr-embedded)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),armeb-linux)
override TARGET_DIRS+=text  linux unix graph lister
endif
ifeq ($(FULL_TARGET),armeb-embedded)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),mips-linux)
override TARGET_DIRS+=text  linux unix graph lister
endif
ifeq ($(FULL_TARGET),mipsel-linux)
override TARGET_DIRS+=text  linux unix graph lister
endif
ifeq ($(FULL_TARGET),mipsel-embedded)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),mipsel-android)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),jvm-java)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),jvm-android)
override TARGET_DIRS+=text
endif
ifeq ($(FULL_TARGET),i8086-msdos)
override TARGET_DIRS+=text
endif
override INSTALL_FPCPACKAGE=y
ifdef REQUIRE_UNITSDIR
override UNITSDIR+=$(REQUIRE_UNITSDIR)
endif
ifdef REQUIRE_PACKAGESDIR
override PACKAGESDIR+=$(REQUIRE_PACKAGESDIR)
endif
ifdef ZIPINSTALL
ifneq ($(findstring $(OS_TARGET),$(UNIXs)),)
UNIXHier=1
endif
else
ifneq ($(findstring $(OS_SOURCE),$(UNIXs)),)
UNIXHier=1
endif
endif
ifndef INSTALL_PREFIX
ifdef PREFIX
INSTALL_PREFIX=$(PREFIX)
endif
endif
ifndef INSTALL_PREFIX
ifdef UNIXHier
INSTALL_PREFIX=/usr/local
else
ifdef INSTALL_FPCPACKAGE
INSTALL_BASEDIR:=/pp
else
INSTALL_BASEDIR:=/$(PACKAGE_NAME)
endif
endif
endif
export INSTALL_PREFIX
ifdef INSTALL_FPCSUBDIR
export INSTALL_FPCSUBDIR
endif
ifndef DIST_DESTDIR
DIST_DESTDIR:=$(BASEDIR)
endif
export DIST_DESTDIR
ifndef COMPILER_UNITTARGETDIR
ifdef PACKAGEDIR_MAIN
COMPILER_UNITTARGETDIR=$(PACKAGEDIR_MAIN)/units/$(TARGETSUFFIX)
else
COMPILER_UNITTARGETDIR=units/$(TARGETSUFFIX)
endif
endif
ifndef COMPILER_TARGETDIR
COMPILER_TARGETDIR=.
endif
ifndef INSTALL_BASEDIR
ifdef UNIXHier
ifdef INSTALL_FPCPACKAGE
INSTALL_BASEDIR:=$(INSTALL_PREFIX)/lib/fpc/$(FPC_VERSION)
else
INSTALL_BASEDIR:=$(INSTALL_PREFIX)/lib/$(PACKAGE_NAME)
endif
else
INSTALL_BASEDIR:=$(INSTALL_PREFIX)
endif
endif
ifndef INSTALL_BINDIR
ifdef UNIXHier
INSTALL_BINDIR:=$(INSTALL_PREFIX)/bin
else
INSTALL_BINDIR:=$(INSTALL_BASEDIR)/bin
ifdef INSTALL_FPCPACKAGE
ifdef CROSSCOMPILE
ifdef CROSSINSTALL
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(SOURCESUFFIX)
else
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(TARGETSUFFIX)
endif
else
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(TARGETSUFFIX)
endif
endif
endif
endif
ifndef INSTALL_UNITDIR
INSTALL_UNITDIR:=$(INSTALL_BASEDIR)/units/$(TARGETSUFFIX)
ifdef INSTALL_FPCPACKAGE
ifdef PACKAGE_NAME
INSTALL_UNITDIR:=$(INSTALL_UNITDIR)/$(PACKAGE_NAME)
endif
endif
endif
ifndef INSTALL_LIBDIR
ifdef UNIXHier
INSTALL_LIBDIR:=$(INSTALL_PREFIX)/lib
else
INSTALL_LIBDIR:=$(INSTALL_UNITDIR)
endif
endif
ifndef INSTALL_SOURCEDIR
ifdef UNIXHier
ifdef BSDhier
SRCPREFIXDIR=share/src
else
ifdef linuxHier
SRCPREFIXDIR=share/src
else
SRCPREFIXDIR=src
endif
endif
ifdef INSTALL_FPCPACKAGE
ifdef INSTALL_FPCSUBDIR
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/fpc-$(FPC_VERSION)/$(INSTALL_FPCSUBDIR)/$(PACKAGE_NAME)
else
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
endif
else
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
else
ifdef INSTALL_FPCPACKAGE
ifdef INSTALL_FPCSUBDIR
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source/$(INSTALL_FPCSUBDIR)/$(PACKAGE_NAME)
else
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source/$(PACKAGE_NAME)
endif
else
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source
endif
endif
endif
ifndef INSTALL_DOCDIR
ifdef UNIXHier
ifdef BSDhier
DOCPREFIXDIR=share/doc
else
ifdef linuxHier
DOCPREFIXDIR=share/doc
else
DOCPREFIXDIR=doc
endif
endif
ifdef INSTALL_FPCPACKAGE
INSTALL_DOCDIR:=$(INSTALL_PREFIX)/$(DOCPREFIXDIR)/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
else
INSTALL_DOCDIR:=$(INSTALL_PREFIX)/$(DOCPREFIXDIR)/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
else
ifdef INSTALL_FPCPACKAGE
INSTALL_DOCDIR:=$(INSTALL_BASEDIR)/doc/$(PACKAGE_NAME)
else
INSTALL_DOCDIR:=$(INSTALL_BASEDIR)/doc
endif
endif
endif
ifndef INSTALL_EXAMPLEDIR
ifdef UNIXHier
ifdef INSTALL_FPCPACKAGE
ifdef BSDhier
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/share/examples/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
else
ifdef linuxHier
INSTALL_EXAMPLEDIR:=$(INSTALL_DOCDIR)/examples
else
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/doc/fpc-$(FPC_VERSION)/examples/$(PACKAGE_NAME)
endif
endif
else
ifdef BSDhier
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/share/examples/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
else
ifdef linuxHier
INSTALL_EXAMPLEDIR:=$(INSTALL_DOCDIR)/examples/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
else
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/doc/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
endif
endif
else
ifdef INSTALL_FPCPACKAGE
INSTALL_EXAMPLEDIR:=$(INSTALL_BASEDIR)/examples/$(PACKAGE_NAME)
else
INSTALL_EXAMPLEDIR:=$(INSTALL_BASEDIR)/examples
endif
endif
endif
ifndef INSTALL_DATADIR
INSTALL_DATADIR=$(INSTALL_BASEDIR)
endif
ifndef INSTALL_SHAREDDIR
INSTALL_SHAREDDIR=$(INSTALL_PREFIX)/lib
endif
ifdef CROSSCOMPILE
ifndef CROSSBINDIR
CROSSBINDIR:=$(wildcard $(CROSSTARGETDIR)/bin/$(SOURCESUFFIX))
ifeq ($(CROSSBINDIR),)
CROSSBINDIR:=$(wildcard $(INSTALL_BASEDIR)/cross/$(TARGETSUFFIX)/bin/$(FULL_SOURCE))
endif
endif
else
CROSSBINDIR=
endif
BATCHEXT=.bat
LOADEREXT=.as
EXEEXT=.exe
PPLEXT=.ppl
PPUEXT=.ppu
OEXT=.o
ASMEXT=.s
SMARTEXT=.sl
STATICLIBEXT=.a
SHAREDLIBEXT=.so
SHAREDLIBPREFIX=libfp
STATICLIBPREFIX=libp
IMPORTLIBPREFIX=libimp
RSTEXT=.rst
EXEDBGEXT=.dbg
ifeq ($(OS_TARGET),go32v1)
STATICLIBPREFIX=
SHORTSUFFIX=v1
endif
ifeq ($(OS_TARGET),go32v2)
STATICLIBPREFIX=
SHORTSUFFIX=dos
IMPORTLIBPREFIX=
endif
ifeq ($(OS_TARGET),watcom)
STATICLIBPREFIX=
OEXT=.obj
ASMEXT=.asm
SHAREDLIBEXT=.dll
SHORTSUFFIX=wat
IMPORTLIBPREFIX=
endif
ifneq ($(CPU_TARGET),jvm)
ifeq ($(OS_TARGET),android)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=lnx
endif
endif
ifeq ($(OS_TARGET),linux)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=lnx
endif
ifeq ($(OS_TARGET),dragonfly)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=df
endif
ifeq ($(OS_TARGET),freebsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=fbs
endif
ifeq ($(OS_TARGET),netbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=nbs
endif
ifeq ($(OS_TARGET),openbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=obs
endif
ifeq ($(OS_TARGET),win32)
SHAREDLIBEXT=.dll
SHORTSUFFIX=w32
endif
ifeq ($(OS_TARGET),os2)
BATCHEXT=.cmd
AOUTEXT=.out
STATICLIBPREFIX=
SHAREDLIBEXT=.dll
SHORTSUFFIX=os2
ECHO=echo
IMPORTLIBPREFIX=
endif
ifeq ($(OS_TARGET),emx)
BATCHEXT=.cmd
AOUTEXT=.out
STATICLIBPREFIX=
SHAREDLIBEXT=.dll
SHORTSUFFIX=emx
ECHO=echo
IMPORTLIBPREFIX=
endif
ifeq ($(OS_TARGET),amiga)
EXEEXT=
SHAREDLIBEXT=.library
SHORTSUFFIX=amg
endif
ifeq ($(OS_TARGET),aros)
EXEEXT=
SHAREDLIBEXT=.library
SHORTSUFFIX=aros
endif
ifeq ($(OS_TARGET),morphos)
EXEEXT=
SHAREDLIBEXT=.library
SHORTSUFFIX=mos
endif
ifeq ($(OS_TARGET),atari)
EXEEXT=.ttp
SHORTSUFFIX=ata
endif
ifeq ($(OS_TARGET),beos)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=be
endif
ifeq ($(OS_TARGET),haiku)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=hai
endif
ifeq ($(OS_TARGET),solaris)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=sun
endif
ifeq ($(OS_TARGET),qnx)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=qnx
endif
ifeq ($(OS_TARGET),netware)
EXEEXT=.nlm
STATICLIBPREFIX=
SHORTSUFFIX=nw
IMPORTLIBPREFIX=imp
endif
ifeq ($(OS_TARGET),netwlibc)
EXEEXT=.nlm
STATICLIBPREFIX=
SHORTSUFFIX=nwl
IMPORTLIBPREFIX=imp
endif
ifeq ($(OS_TARGET),macos)
BATCHEXT=
EXEEXT=
DEBUGSYMEXT=.xcoff
SHORTSUFFIX=mac
IMPORTLIBPREFIX=imp
endif
ifneq ($(findstring $(OS_TARGET),darwin iphonesim),)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=dwn
EXEDBGEXT=.dSYM
endif
ifeq ($(OS_TARGET),gba)
EXEEXT=.gba
SHAREDLIBEXT=.so
SHORTSUFFIX=gba
endif
ifeq ($(OS_TARGET),symbian)
SHAREDLIBEXT=.dll
SHORTSUFFIX=symbian
endif
ifeq ($(OS_TARGET),NativeNT)
SHAREDLIBEXT=.dll
SHORTSUFFIX=nativent
endif
ifeq ($(OS_TARGET),wii)
EXEEXT=.dol
SHAREDLIBEXT=.so
SHORTSUFFIX=wii
endif
ifeq ($(OS_TARGET),aix)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=aix
endif
ifeq ($(OS_TARGET),java)
OEXT=.class
ASMEXT=.j
SHAREDLIBEXT=.jar
SHORTSUFFIX=java
endif
ifeq ($(CPU_TARGET),jvm)
ifeq ($(OS_TARGET),android)
OEXT=.class
ASMEXT=.j
SHAREDLIBEXT=.jar
SHORTSUFFIX=android
endif
endif
ifeq ($(OS_TARGET),msdos)
STATICLIBPREFIX=
STATICLIBEXT=.a
SHORTSUFFIX=d16
endif
ifneq ($(findstring $(OS_SOURCE),$(LIMIT83fs)),)
FPCMADE=fpcmade.$(SHORTSUFFIX)
ZIPSUFFIX=$(SHORTSUFFIX)
ZIPCROSSPREFIX=
ZIPSOURCESUFFIX=src
ZIPEXAMPLESUFFIX=exm
else
FPCMADE=fpcmade.$(TARGETSUFFIX)
ZIPSOURCESUFFIX=.source
ZIPEXAMPLESUFFIX=.examples
ifdef CROSSCOMPILE
ZIPSUFFIX=.$(SOURCESUFFIX)
ZIPCROSSPREFIX=$(TARGETSUFFIX)-
else
ZIPSUFFIX=.$(TARGETSUFFIX)
ZIPCROSSPREFIX=
endif
endif
ifndef ECHO
ECHO:=$(strip $(wildcard $(addsuffix /gecho$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO:=$(strip $(wildcard $(addsuffix /echo$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO= __missing_command_ECHO
else
ECHO:=$(firstword $(ECHO))
endif
else
ECHO:=$(firstword $(ECHO))
endif
endif
export ECHO
ifndef DATE
DATE:=$(strip $(wildcard $(addsuffix /gdate$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(DATE),)
DATE:=$(strip $(wildcard $(addsuffix /date$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(DATE),)
DATE= __missing_command_DATE
else
DATE:=$(firstword $(DATE))
endif
else
DATE:=$(firstword $(DATE))
endif
endif
export DATE
ifndef GINSTALL
GINSTALL:=$(strip $(wildcard $(addsuffix /ginstall$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(GINSTALL),)
GINSTALL:=$(strip $(wildcard $(addsuffix /install$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(GINSTALL),)
GINSTALL= __missing_command_GINSTALL
else
GINSTALL:=$(firstword $(GINSTALL))
endif
else
GINSTALL:=$(firstword $(GINSTALL))
endif
endif
export GINSTALL
ifndef CPPROG
CPPROG:=$(strip $(wildcard $(addsuffix /cp$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(CPPROG),)
CPPROG= __missing_command_CPPROG
else
CPPROG:=$(firstword $(CPPROG))
endif
endif
export CPPROG
ifndef RMPROG
RMPROG:=$(strip $(wildcard $(addsuffix /rm$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(RMPROG),)
RMPROG= __missing_command_RMPROG
else
RMPROG:=$(firstword $(RMPROG))
endif
endif
export RMPROG
ifndef MVPROG
MVPROG:=$(strip $(wildcard $(addsuffix /mv$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MVPROG),)
MVPROG= __missing_command_MVPROG
else
MVPROG:=$(firstword $(MVPROG))
endif
endif
export MVPROG
ifndef MKDIRPROG
MKDIRPROG:=$(strip $(wildcard $(addsuffix /gmkdir$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MKDIRPROG),)
MKDIRPROG:=$(strip $(wildcard $(addsuffix /mkdir$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MKDIRPROG),)
MKDIRPROG= __missing_command_MKDIRPROG
else
MKDIRPROG:=$(firstword $(MKDIRPROG))
endif
else
MKDIRPROG:=$(firstword $(MKDIRPROG))
endif
endif
export MKDIRPROG
ifndef ECHOREDIR
ifndef inUnix
ECHOREDIR=echo
else
ECHOREDIR=$(ECHO)
endif
endif
ifndef COPY
COPY:=$(CPPROG) -fp
endif
ifndef COPYTREE
COPYTREE:=$(CPPROG) -Rfp
endif
ifndef MKDIRTREE
MKDIRTREE:=$(MKDIRPROG) -p
endif
ifndef MOVE
MOVE:=$(MVPROG) -f
endif
ifndef DEL
DEL:=$(RMPROG) -f
endif
ifndef DELTREE
DELTREE:=$(RMPROG) -rf
endif
ifndef INSTALL
ifdef inUnix
INSTALL:=$(GINSTALL) -c -m 644
else
INSTALL:=$(COPY)
endif
endif
ifndef INSTALLEXE
ifdef inUnix
INSTALLEXE:=$(GINSTALL) -c -m 755
else
INSTALLEXE:=$(COPY)
endif
endif
ifndef MKDIR
MKDIR:=$(GINSTALL) -m 755 -d
endif
export ECHOREDIR COPY COPYTREE MOVE DEL DELTREE INSTALL INSTALLEXE MKDIR
ifndef PPUMOVE
PPUMOVE:=$(strip $(wildcard $(addsuffix /ppumove$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(PPUMOVE),)
PPUMOVE= __missing_command_PPUMOVE
else
PPUMOVE:=$(firstword $(PPUMOVE))
endif
endif
export PPUMOVE
ifndef FPCMAKE
FPCMAKE:=$(strip $(wildcard $(addsuffix /fpcmake$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(FPCMAKE),)
FPCMAKE= __missing_command_FPCMAKE
else
FPCMAKE:=$(firstword $(FPCMAKE))
endif
endif
export FPCMAKE
ifndef ZIPPROG
ZIPPROG:=$(strip $(wildcard $(addsuffix /zip$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ZIPPROG),)
ZIPPROG= __missing_command_ZIPPROG
else
ZIPPROG:=$(firstword $(ZIPPROG))
endif
endif
export ZIPPROG
ifndef TARPROG
TARPROG:=$(strip $(wildcard $(addsuffix /gtar$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(TARPROG),)
TARPROG:=$(strip $(wildcard $(addsuffix /tar$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(TARPROG),)
TARPROG= __missing_command_TARPROG
else
TARPROG:=$(firstword $(TARPROG))
endif
else
TARPROG:=$(firstword $(TARPROG))
endif
endif
export TARPROG
ASNAME=$(BINUTILSPREFIX)as
LDNAME=$(BINUTILSPREFIX)ld
ARNAME=$(BINUTILSPREFIX)ar
RCNAME=$(BINUTILSPREFIX)rc
NASMNAME=$(BINUTILSPREFIX)nasm
ifndef ASPROG
ifdef CROSSBINDIR
ASPROG=$(CROSSBINDIR)/$(ASNAME)$(SRCEXEEXT)
else
ASPROG=$(ASNAME)
endif
endif
ifndef LDPROG
ifdef CROSSBINDIR
LDPROG=$(CROSSBINDIR)/$(LDNAME)$(SRCEXEEXT)
else
LDPROG=$(LDNAME)
endif
endif
ifndef RCPROG
ifdef CROSSBINDIR
RCPROG=$(CROSSBINDIR)/$(RCNAME)$(SRCEXEEXT)
else
RCPROG=$(RCNAME)
endif
endif
ifndef ARPROG
ifdef CROSSBINDIR
ARPROG=$(CROSSBINDIR)/$(ARNAME)$(SRCEXEEXT)
else
ARPROG=$(ARNAME)
endif
endif
ifndef NASMPROG
ifdef CROSSBINDIR
NASMPROG=$(CROSSBINDIR)/$(NASMNAME)$(SRCEXEEXT)
else
NASMPROG=$(NASMNAME)
endif
endif
AS=$(ASPROG)
LD=$(LDPROG)
RC=$(RCPROG)
AR=$(ARPROG)
NASM=$(NASMPROG)
ifdef inUnix
PPAS=./ppas$(SRCBATCHEXT)
else
PPAS=ppas$(SRCBATCHEXT)
endif
ifdef inUnix
LDCONFIG=ldconfig
else
LDCONFIG=
endif
ifdef DATE
DATESTR:=$(shell $(DATE) +%Y%m%d)
else
DATESTR=
endif
ZIPOPT=-9
ZIPEXT=.zip
ifeq ($(USETAR),bz2)
TAROPT=vj
TAREXT=.tar.bz2
else
TAROPT=vz
TAREXT=.tar.gz
endif
ifndef NOCPUDEF
override FPCOPTDEF=$(ARCH)
endif
ifneq ($(OS_TARGET),$(OS_SOURCE))
override FPCOPT+=-T$(OS_TARGET)
endif
ifneq ($(CPU_TARGET),$(CPU_SOURCE))
override FPCOPT+=-P$(ARCH)
endif
ifeq ($(OS_SOURCE),openbsd)
override FPCOPT+=-FD$(NEW_BINUTILS_PATH)
override FPCMAKEOPT+=-FD$(NEW_BINUTILS_PATH)
endif
ifndef CROSSBOOTSTRAP
ifneq ($(BINUTILSPREFIX),)
override FPCOPT+=-XP$(BINUTILSPREFIX)
endif
ifneq ($(BINUTILSPREFIX),)
override FPCOPT+=-Xr$(RLINKPATH)
endif
endif
ifndef CROSSCOMPILE
ifneq ($(BINUTILSPREFIX),)
override FPCMAKEOPT+=-XP$(BINUTILSPREFIX)
endif
endif
ifdef UNITDIR
override FPCOPT+=$(addprefix -Fu,$(UNITDIR))
endif
ifdef LIBDIR
override FPCOPT+=$(addprefix -Fl,$(LIBDIR))
endif
ifdef OBJDIR
override FPCOPT+=$(addprefix -Fo,$(OBJDIR))
endif
ifdef INCDIR
override FPCOPT+=$(addprefix -Fi,$(INCDIR))
endif
ifdef LINKSMART
override FPCOPT+=-XX
endif
ifdef CREATESMART
override FPCOPT+=-CX
endif
ifdef DEBUG
override FPCOPT+=-gl
override FPCOPTDEF+=DEBUG
endif
ifdef RELEASE
ifneq ($(findstring 2.0.,$(FPC_VERSION)),)
ifeq ($(CPU_TARGET),i386)
FPCCPUOPT:=-OG2p3
endif
ifeq ($(CPU_TARGET),powerpc)
FPCCPUOPT:=-O1r
endif
else
FPCCPUOPT:=-O2
endif
override FPCOPT+=-Ur -Xs $(FPCCPUOPT) -n
override FPCOPTDEF+=RELEASE
endif
ifdef STRIP
override FPCOPT+=-Xs
endif
ifdef OPTIMIZE
override FPCOPT+=-O2
endif
ifdef VERBOSE
override FPCOPT+=-vwni
endif
ifdef COMPILER_OPTIONS
override FPCOPT+=$(COMPILER_OPTIONS)
endif
ifdef COMPILER_UNITDIR
override FPCOPT+=$(addprefix -Fu,$(COMPILER_UNITDIR))
endif
ifdef COMPILER_LIBRARYDIR
override FPCOPT+=$(addprefix -Fl,$(COMPILER_LIBRARYDIR))
endif
ifdef COMPILER_OBJECTDIR
override FPCOPT+=$(addprefix -Fo,$(COMPILER_OBJECTDIR))
endif
ifdef COMPILER_INCLUDEDIR
override FPCOPT+=$(addprefix -Fi,$(COMPILER_INCLUDEDIR))
endif
ifdef CROSSBINDIR
override FPCOPT+=-FD$(CROSSBINDIR)
endif
ifdef COMPILER_TARGETDIR
override FPCOPT+=-FE$(COMPILER_TARGETDIR)
ifeq ($(COMPILER_TARGETDIR),.)
override TARGETDIRPREFIX=
else
override TARGETDIRPREFIX=$(COMPILER_TARGETDIR)/
endif
endif
ifdef COMPILER_UNITTARGETDIR
override FPCOPT+=-FU$(COMPILER_UNITTARGETDIR)
ifeq ($(COMPILER_UNITTARGETDIR),.)
override UNITTARGETDIRPREFIX=
else
override UNITTARGETDIRPREFIX=$(COMPILER_UNITTARGETDIR)/
endif
else
ifdef COMPILER_TARGETDIR
override COMPILER_UNITTARGETDIR=$(COMPILER_TARGETDIR)
override UNITTARGETDIRPREFIX=$(TARGETDIRPREFIX)
endif
endif
ifdef CREATESHARED
override FPCOPT+=-Cg
endif
ifneq ($(findstring $(OS_TARGET),dragonfly freebsd openbsd netbsd linux solaris),)
ifneq ($(findstring $(CPU_TARGET),x86_64 mips mipsel),)
override FPCOPT+=-Cg
endif
endif
ifdef LINKSHARED
endif
ifdef OPT
override FPCOPT+=$(OPT)
endif
ifdef FPCOPTDEF
override FPCOPT+=$(addprefix -d,$(FPCOPTDEF))
endif
ifdef CFGFILE
override FPCOPT+=@$(CFGFILE)
endif
ifdef USEENV
override FPCEXTCMD:=$(FPCOPT)
override FPCOPT:=!FPCEXTCMD
export FPCEXTCMD
endif
override AFULL_TARGET=$(CPU_TARGET)-$(OS_TARGET)
override AFULL_SOURCE=$(CPU_SOURCE)-$(OS_SOURCE)
ifneq ($(AFULL_TARGET),$(AFULL_SOURCE))
override ACROSSCOMPILE=1
endif
ifdef ACROSSCOMPILE
override FPCOPT+=$(CROSSOPT)
endif
override COMPILER:=$(strip $(FPC) $(FPCOPT))
ifneq (,$(findstring -sh ,$(COMPILER)))
UseEXECPPAS=1
endif
ifneq (,$(findstring -s ,$(COMPILER)))
ifeq ($(FULL_SOURCE),$(FULL_TARGET))
UseEXECPPAS=1
endif
endif
ifneq ($(UseEXECPPAS),1)
EXECPPAS=
else
ifdef RUNBATCH
EXECPPAS:=@$(RUNBATCH) $(PPAS)
else
EXECPPAS:=@$(PPAS)
endif
endif
ifdef TARGET_RSTS
override RSTFILES=$(addsuffix $(RSTEXT),$(TARGET_RSTS))
override CLEANRSTFILES+=$(RSTFILES)
endif
.PHONY: fpc_install fpc_sourceinstall fpc_exampleinstall
ifdef INSTALL_UNITS
override INSTALLPPUFILES+=$(addsuffix $(PPUEXT),$(INSTALL_UNITS))
endif
ifdef INSTALL_BUILDUNIT
override INSTALLPPUFILES:=$(filter-out $(INSTALL_BUILDUNIT)$(PPUEXT),$(INSTALLPPUFILES))
endif
ifdef INSTALLPPUFILES
override INSTALLPPULINKFILES:=$(subst $(PPUEXT),$(OEXT),$(INSTALLPPUFILES)) $(addprefix $(STATICLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(INSTALLPPUFILES))) $(addprefix $(IMPORTLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(INSTALLPPUFILES)))
ifneq ($(UNITTARGETDIRPREFIX),)
override INSTALLPPUFILES:=$(addprefix $(UNITTARGETDIRPREFIX),$(notdir $(INSTALLPPUFILES)))
override INSTALLPPULINKFILES:=$(wildcard $(addprefix $(UNITTARGETDIRPREFIX),$(notdir $(INSTALLPPULINKFILES))))
endif
override INSTALL_CREATEPACKAGEFPC=1
endif
ifdef INSTALLEXEFILES
ifneq ($(TARGETDIRPREFIX),)
override INSTALLEXEFILES:=$(addprefix $(TARGETDIRPREFIX),$(notdir $(INSTALLEXEFILES)))
endif
endif
fpc_install: all $(INSTALLTARGET)
ifdef INSTALLEXEFILES
	$(MKDIR) $(INSTALL_BINDIR)
	$(INSTALLEXE) $(INSTALLEXEFILES) $(INSTALL_BINDIR)
endif
ifdef INSTALL_CREATEPACKAGEFPC
ifdef FPCMAKE
ifdef PACKAGE_VERSION
ifneq ($(wildcard Makefile.fpc),)
	$(FPCMAKE) -p -T$(CPU_TARGET)-$(OS_TARGET) Makefile.fpc
	$(MKDIR) $(INSTALL_UNITDIR)
	$(INSTALL) Package.fpc $(INSTALL_UNITDIR)
endif
endif
endif
endif
ifdef INSTALLPPUFILES
	$(MKDIR) $(INSTALL_UNITDIR)
	$(INSTALL) $(INSTALLPPUFILES) $(INSTALL_UNITDIR)
ifneq ($(INSTALLPPULINKFILES),)
	$(INSTALL) $(INSTALLPPULINKFILES) $(INSTALL_UNITDIR)
endif
ifneq ($(wildcard $(LIB_FULLNAME)),)
	$(MKDIR) $(INSTALL_LIBDIR)
	$(INSTALL) $(LIB_FULLNAME) $(INSTALL_LIBDIR)
ifdef inUnix
	ln -sf $(LIB_FULLNAME) $(INSTALL_LIBDIR)/$(LIB_NAME)
endif
endif
endif
ifdef INSTALL_FILES
	$(MKDIR) $(INSTALL_DATADIR)
	$(INSTALL) $(INSTALL_FILES) $(INSTALL_DATADIR)
endif
fpc_sourceinstall: distclean
	$(MKDIR) $(INSTALL_SOURCEDIR)
	$(COPYTREE) $(BASEDIR)/* $(INSTALL_SOURCEDIR)
fpc_exampleinstall: $(addsuffix _distclean,$(TARGET_EXAMPLEDIRS))
ifdef HASEXAMPLES
	$(MKDIR) $(INSTALL_EXAMPLEDIR)
endif
ifdef EXAMPLESOURCEFILES
	$(COPY) $(EXAMPLESOURCEFILES) $(INSTALL_EXAMPLEDIR)
endif
ifdef TARGET_EXAMPLEDIRS
	$(COPYTREE) $(addsuffix /*,$(TARGET_EXAMPLEDIRS)) $(INSTALL_EXAMPLEDIR)
endif
.PHONY: fpc_distinstall
fpc_distinstall: install exampleinstall
.PHONY: fpc_zipinstall fpc_zipsourceinstall fpc_zipexampleinstall
ifndef PACKDIR
ifndef inUnix
PACKDIR=$(BASEDIR)/../fpc-pack
else
PACKDIR=/tmp/fpc-pack
endif
endif
ifndef ZIPNAME
ifdef DIST_ZIPNAME
ZIPNAME=$(DIST_ZIPNAME)
else
ZIPNAME=$(PACKAGE_NAME)
endif
endif
ifndef FULLZIPNAME
FULLZIPNAME=$(ZIPCROSSPREFIX)$(ZIPPREFIX)$(ZIPNAME)$(ZIPSUFFIX)
endif
ifndef ZIPTARGET
ifdef DIST_ZIPTARGET
ZIPTARGET=DIST_ZIPTARGET
else
ZIPTARGET=install
endif
endif
ifndef USEZIP
ifdef inUnix
USETAR=1
endif
endif
ifndef inUnix
USEZIPWRAPPER=1
endif
ifdef USEZIPWRAPPER
ZIPPATHSEP=$(PATHSEP)
ZIPWRAPPER=$(subst /,$(PATHSEP),$(DIST_DESTDIR)/fpczip$(SRCBATCHEXT))
else
ZIPPATHSEP=/
endif
ZIPCMD_CDPACK:=cd $(subst /,$(ZIPPATHSEP),$(PACKDIR))
ZIPCMD_CDBASE:=cd $(subst /,$(ZIPPATHSEP),$(BASEDIR))
ifdef USETAR
ZIPDESTFILE:=$(DIST_DESTDIR)/$(FULLZIPNAME)$(TAREXT)
ZIPCMD_ZIP:=$(TARPROG) c$(TAROPT)f $(ZIPDESTFILE) *
else
ZIPDESTFILE:=$(DIST_DESTDIR)/$(FULLZIPNAME)$(ZIPEXT)
ZIPCMD_ZIP:=$(subst /,$(ZIPPATHSEP),$(ZIPPROG)) -Dr $(ZIPOPT) $(ZIPDESTFILE) *
endif
fpc_zipinstall:
	$(MAKE) $(ZIPTARGET) INSTALL_PREFIX=$(PACKDIR) ZIPINSTALL=1
	$(MKDIR) $(DIST_DESTDIR)
	$(DEL) $(ZIPDESTFILE)
ifdef USEZIPWRAPPER
ifneq ($(ECHOREDIR),echo)
	$(ECHOREDIR) -e "$(subst \,\\,$(ZIPCMD_CDPACK))" > $(ZIPWRAPPER)
	$(ECHOREDIR) -e "$(subst \,\\,$(ZIPCMD_ZIP))" >> $(ZIPWRAPPER)
	$(ECHOREDIR) -e "$(subst \,\\,$(ZIPCMD_CDBASE))" >> $(ZIPWRAPPER)
else
	echo $(ZIPCMD_CDPACK) > $(ZIPWRAPPER)
	echo $(ZIPCMD_ZIP) >> $(ZIPWRAPPER)
	echo $(ZIPCMD_CDBASE) >> $(ZIPWRAPPER)
endif
ifdef inUnix
	/bin/sh $(ZIPWRAPPER)
else
ifdef RUNBATCH
	$(RUNBATCH) $(ZIPWRAPPER)
else
	$(ZIPWRAPPER)
endif
endif
	$(DEL) $(ZIPWRAPPER)
else
	$(ZIPCMD_CDPACK) ; $(ZIPCMD_ZIP) ; $(ZIPCMD_CDBASE)
endif
	$(DELTREE) $(PACKDIR)
fpc_zipsourceinstall:
	$(MAKE) fpc_zipinstall ZIPTARGET=sourceinstall ZIPSUFFIX=$(ZIPSOURCESUFFIX)
fpc_zipexampleinstall:
ifdef HASEXAMPLES
	$(MAKE) fpc_zipinstall ZIPTARGET=exampleinstall ZIPSUFFIX=$(ZIPEXAMPLESUFFIX)
endif
fpc_zipdistinstall:
	$(MAKE) fpc_zipinstall ZIPTARGET=distinstall
.PHONY: fpc_clean fpc_cleanall fpc_distclean
ifdef EXEFILES
override CLEANEXEFILES:=$(addprefix $(TARGETDIRPREFIX),$(CLEANEXEFILES))
override CLEANEXEDBGFILES:=$(addprefix $(TARGETDIRPREFIX),$(CLEANEXEDBGFILES))
endif
ifdef CLEAN_PROGRAMS
override CLEANEXEFILES+=$(addprefix $(TARGETDIRPREFIX),$(addsuffix $(EXEEXT), $(CLEAN_PROGRAMS)))
override CLEANEXEDBGFILES+=$(addprefix $(TARGETDIRPREFIX),$(addsuffix $(EXEDBGEXT), $(CLEAN_PROGRAMS)))
endif
ifdef CLEAN_UNITS
override CLEANPPUFILES+=$(addsuffix $(PPUEXT),$(CLEAN_UNITS))
endif
ifdef CLEANPPUFILES
override CLEANPPULINKFILES:=$(subst $(PPUEXT),$(OEXT),$(CLEANPPUFILES)) $(addprefix $(STATICLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(CLEANPPUFILES))) $(addprefix $(IMPORTLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(CLEANPPUFILES)))
ifdef DEBUGSYMEXT
override CLEANPPULINKFILES+=$(subst $(PPUEXT),$(DEBUGSYMEXT),$(CLEANPPUFILES))
endif
override CLEANPPUFILES:=$(addprefix $(UNITTARGETDIRPREFIX),$(CLEANPPUFILES))
override CLEANPPULINKFILES:=$(wildcard $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANPPULINKFILES)))
endif
fpc_clean: $(CLEANTARGET)
ifdef CLEANEXEFILES
	-$(DEL) $(CLEANEXEFILES)
endif
ifdef CLEANEXEDBGFILES
	-$(DELTREE) $(CLEANEXEDBGFILES)
endif
ifdef CLEANPPUFILES
	-$(DEL) $(CLEANPPUFILES)
endif
ifneq ($(CLEANPPULINKFILES),)
	-$(DEL) $(CLEANPPULINKFILES)
endif
ifdef CLEANRSTFILES
	-$(DEL) $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANRSTFILES))
endif
ifdef CLEAN_FILES
	-$(DEL) $(CLEAN_FILES)
endif
ifdef LIB_NAME
	-$(DEL) $(LIB_NAME) $(LIB_FULLNAME)
endif
	-$(DEL) $(FPCMADE) Package.fpc $(PPAS) script.res link.res $(FPCEXTFILE) $(REDIRFILE)
	-$(DEL) *$(ASMEXT) *_ppas$(BATCHEXT)
fpc_cleanall: $(CLEANTARGET)
ifdef CLEANEXEFILES
	-$(DEL) $(CLEANEXEFILES)
endif
ifdef COMPILER_UNITTARGETDIR
ifdef CLEANPPUFILES
	-$(DEL) $(CLEANPPUFILES)
endif
ifneq ($(CLEANPPULINKFILES),)
	-$(DEL) $(CLEANPPULINKFILES)
endif
ifdef CLEANRSTFILES
	-$(DEL) $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANRSTFILES))
endif
endif
ifdef CLEAN_FILES
	-$(DEL) $(CLEAN_FILES)
endif
	-$(DELTREE) units
	-$(DEL) *$(OEXT) *$(PPUEXT) *$(RSTEXT) *$(ASMEXT) *$(STATICLIBEXT) *$(SHAREDLIBEXT) *$(PPLEXT)
ifneq ($(PPUEXT),.ppu)
	-$(DEL) *.o *.ppu *.a
endif
	-$(DELTREE) *$(SMARTEXT)
	-$(DEL) fpcmade.* Package.fpc $(PPAS) script.res link.res $(FPCEXTFILE) $(REDIRFILE)
	-$(DEL) *_ppas$(BATCHEXT)
ifdef AOUTEXT
	-$(DEL) *$(AOUTEXT)
endif
ifdef DEBUGSYMEXT
	-$(DEL) *$(DEBUGSYMEXT)
endif
fpc_distclean: cleanall
.PHONY: fpc_baseinfo
override INFORULES+=fpc_baseinfo
fpc_baseinfo:
	@$(ECHO)
	@$(ECHO)  == Package info ==
	@$(ECHO)  Package Name..... $(PACKAGE_NAME)
	@$(ECHO)  Package Version.. $(PACKAGE_VERSION)
	@$(ECHO)
	@$(ECHO)  == Configuration info ==
	@$(ECHO)
	@$(ECHO)  FPC.......... $(FPC)
	@$(ECHO)  FPC Version.. $(FPC_VERSION)
	@$(ECHO)  Source CPU... $(CPU_SOURCE)
	@$(ECHO)  Target CPU... $(CPU_TARGET)
	@$(ECHO)  Source OS.... $(OS_SOURCE)
	@$(ECHO)  Target OS.... $(OS_TARGET)
	@$(ECHO)  Full Source.. $(FULL_SOURCE)
	@$(ECHO)  Full Target.. $(FULL_TARGET)
	@$(ECHO)  SourceSuffix. $(SOURCESUFFIX)
	@$(ECHO)  TargetSuffix. $(TARGETSUFFIX)
	@$(ECHO)  FPC fpmake... $(FPCFPMAKE)
	@$(ECHO)
	@$(ECHO)  == Directory info ==
	@$(ECHO)
	@$(ECHO)  Required pkgs... $(REQUIRE_PACKAGES)
	@$(ECHO)
	@$(ECHO)  Basedir......... $(BASEDIR)
	@$(ECHO)  FPCDir.......... $(FPCDIR)
	@$(ECHO)  CrossBinDir..... $(CROSSBINDIR)
	@$(ECHO)  UnitsDir........ $(UNITSDIR)
	@$(ECHO)  PackagesDir..... $(PACKAGESDIR)
	@$(ECHO)
	@$(ECHO)  GCC library..... $(GCCLIBDIR)
	@$(ECHO)  Other library... $(OTHERLIBDIR)
	@$(ECHO)
	@$(ECHO)  == Tools info ==
	@$(ECHO)
	@$(ECHO)  As........ $(AS)
	@$(ECHO)  Ld........ $(LD)
	@$(ECHO)  Ar........ $(AR)
	@$(ECHO)  Rc........ $(RC)
	@$(ECHO)
	@$(ECHO)  Mv........ $(MVPROG)
	@$(ECHO)  Cp........ $(CPPROG)
	@$(ECHO)  Rm........ $(RMPROG)
	@$(ECHO)  GInstall.. $(GINSTALL)
	@$(ECHO)  Echo...... $(ECHO)
	@$(ECHO)  Shell..... $(SHELL)
	@$(ECHO)  Date...... $(DATE)
	@$(ECHO)  FPCMake... $(FPCMAKE)
	@$(ECHO)  PPUMove... $(PPUMOVE)
	@$(ECHO)  Zip....... $(ZIPPROG)
	@$(ECHO)
	@$(ECHO)  == Object info ==
	@$(ECHO)
	@$(ECHO)  Target Loaders........ $(TARGET_LOADERS)
	@$(ECHO)  Target Units.......... $(TARGET_UNITS)
	@$(ECHO)  Target Implicit Units. $(TARGET_IMPLICITUNITS)
	@$(ECHO)  Target Programs....... $(TARGET_PROGRAMS)
	@$(ECHO)  Target Dirs........... $(TARGET_DIRS)
	@$(ECHO)  Target Examples....... $(TARGET_EXAMPLES)
	@$(ECHO)  Target ExampleDirs.... $(TARGET_EXAMPLEDIRS)
	@$(ECHO)
	@$(ECHO)  Clean Units......... $(CLEAN_UNITS)
	@$(ECHO)  Clean Files......... $(CLEAN_FILES)
	@$(ECHO)
	@$(ECHO)  Install Units....... $(INSTALL_UNITS)
	@$(ECHO)  Install Files....... $(INSTALL_FILES)
	@$(ECHO)
	@$(ECHO)  == Install info ==
	@$(ECHO)
	@$(ECHO)  DateStr.............. $(DATESTR)
	@$(ECHO)  ZipName.............. $(ZIPNAME)
	@$(ECHO)  ZipPrefix............ $(ZIPPREFIX)
	@$(ECHO)  ZipCrossPrefix....... $(ZIPCROSSPREFIX)
	@$(ECHO)  ZipSuffix............ $(ZIPSUFFIX)
	@$(ECHO)  FullZipName.......... $(FULLZIPNAME)
	@$(ECHO)  Install FPC Package.. $(INSTALL_FPCPACKAGE)
	@$(ECHO)
	@$(ECHO)  Install base dir..... $(INSTALL_BASEDIR)
	@$(ECHO)  Install binary dir... $(INSTALL_BINDIR)
	@$(ECHO)  Install library dir.. $(INSTALL_LIBDIR)
	@$(ECHO)  Install units dir.... $(INSTALL_UNITDIR)
	@$(ECHO)  Install source dir... $(INSTALL_SOURCEDIR)
	@$(ECHO)  Install doc dir...... $(INSTALL_DOCDIR)
	@$(ECHO)  Install example dir.. $(INSTALL_EXAMPLEDIR)
	@$(ECHO)  Install data dir..... $(INSTALL_DATADIR)
	@$(ECHO)
	@$(ECHO)  Dist destination dir. $(DIST_DESTDIR)
	@$(ECHO)  Dist zip name........ $(DIST_ZIPNAME)
	@$(ECHO)
.PHONY: fpc_info
fpc_info: $(INFORULES)
.PHONY: fpc_makefile fpc_makefiles fpc_makefile_sub1 fpc_makefile_sub2 \
	fpc_makefile_dirs
fpc_makefile:
	$(FPCMAKE) -w -T$(OS_TARGET) Makefile.fpc
fpc_makefile_sub1:
ifdef TARGET_DIRS
	$(FPCMAKE) -w -T$(OS_TARGET) $(addsuffix /Makefile.fpc,$(TARGET_DIRS))
endif
ifdef TARGET_EXAMPLEDIRS
	$(FPCMAKE) -w -T$(OS_TARGET) $(addsuffix /Makefile.fpc,$(TARGET_EXAMPLEDIRS))
endif
fpc_makefile_sub2: $(addsuffix _makefile_dirs,$(TARGET_DIRS) $(TARGET_EXAMPLEDIRS))
fpc_makefile_dirs: fpc_makefile_sub1 fpc_makefile_sub2
fpc_makefiles: fpc_makefile fpc_makefile_dirs
ifeq ($(FULL_TARGET),i386-linux)
TARGET_DIRS_TEXT=1
TARGET_DIRS_LINUX=1
TARGET_DIRS_UNIX=1
TARGET_DIRS_GRAPH=1
TARGET_DIRS_LISTER=1
endif
ifeq ($(FULL_TARGET),i386-go32v2)
TARGET_DIRS_TEXT=1
TARGET_DIRS_MODEX=1
TARGET_DIRS_GRAPH=1
endif
ifeq ($(FULL_TARGET),i386-win32)
TARGET_DIRS_TEXT=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_GRAPH=1
TARGET_DIRS_LISTER=1
endif
ifeq ($(FULL_TARGET),i386-os2)
TARGET_DIRS_TEXT=1
TARGET_DIRS_OS2=1
TARGET_DIRS_LISTER=1
TARGET_DIRS_GRAPH=1
endif
ifeq ($(FULL_TARGET),i386-freebsd)
TARGET_DIRS_TEXT=1
TARGET_DIRS_FREEBSD=1
TARGET_DIRS_UNIX=1
TARGET_DIRS_GRAPH=1
TARGET_DIRS_LISTER=1
endif
ifeq ($(FULL_TARGET),i386-beos)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),i386-haiku)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),i386-netbsd)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),i386-solaris)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),i386-qnx)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),i386-netware)
TARGET_DIRS_TEXT=1
TARGET_DIRS_NETWARE=1
endif
ifeq ($(FULL_TARGET),i386-openbsd)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),i386-wdosx)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),i386-darwin)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),i386-emx)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),i386-watcom)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),i386-netwlibc)
TARGET_DIRS_TEXT=1
TARGET_DIRS_NETWLIBC=1
endif
ifeq ($(FULL_TARGET),i386-wince)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),i386-embedded)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),i386-symbian)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),i386-nativent)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),i386-iphonesim)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),i386-android)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),i386-aros)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),m68k-linux)
TARGET_DIRS_TEXT=1
TARGET_DIRS_LINUX=1
TARGET_DIRS_UNIX=1
TARGET_DIRS_GRAPH=1
TARGET_DIRS_LISTER=1
endif
ifeq ($(FULL_TARGET),m68k-freebsd)
TARGET_DIRS_TEXT=1
TARGET_DIRS_FREEBSD=1
TARGET_DIRS_UNIX=1
TARGET_DIRS_GRAPH=1
TARGET_DIRS_LISTER=1
endif
ifeq ($(FULL_TARGET),m68k-netbsd)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),m68k-amiga)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),m68k-atari)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),m68k-openbsd)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),m68k-palmos)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),m68k-embedded)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),powerpc-linux)
TARGET_DIRS_TEXT=1
TARGET_DIRS_LINUX=1
TARGET_DIRS_UNIX=1
TARGET_DIRS_GRAPH=1
TARGET_DIRS_LISTER=1
endif
ifeq ($(FULL_TARGET),powerpc-netbsd)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),powerpc-amiga)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),powerpc-macos)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),powerpc-darwin)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),powerpc-morphos)
TARGET_DIRS_TEXT=1
TARGET_DIRS_MORPHOS=1
endif
ifeq ($(FULL_TARGET),powerpc-embedded)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),powerpc-wii)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),powerpc-aix)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),sparc-linux)
TARGET_DIRS_TEXT=1
TARGET_DIRS_LINUX=1
TARGET_DIRS_UNIX=1
TARGET_DIRS_GRAPH=1
TARGET_DIRS_LISTER=1
endif
ifeq ($(FULL_TARGET),sparc-netbsd)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),sparc-solaris)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),sparc-embedded)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),x86_64-linux)
TARGET_DIRS_TEXT=1
TARGET_DIRS_LINUX=1
TARGET_DIRS_UNIX=1
TARGET_DIRS_GRAPH=1
TARGET_DIRS_LISTER=1
endif
ifeq ($(FULL_TARGET),x86_64-freebsd)
TARGET_DIRS_TEXT=1
TARGET_DIRS_FREEBSD=1
TARGET_DIRS_UNIX=1
TARGET_DIRS_GRAPH=1
TARGET_DIRS_LISTER=1
endif
ifeq ($(FULL_TARGET),x86_64-netbsd)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),x86_64-solaris)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),x86_64-openbsd)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),x86_64-darwin)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),x86_64-win64)
TARGET_DIRS_TEXT=1
TARGET_DIRS_WIN32=1
TARGET_DIRS_GRAPH=1
TARGET_DIRS_LISTER=1
endif
ifeq ($(FULL_TARGET),x86_64-embedded)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),x86_64-dragonfly)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),arm-linux)
TARGET_DIRS_TEXT=1
TARGET_DIRS_LINUX=1
TARGET_DIRS_UNIX=1
TARGET_DIRS_GRAPH=1
TARGET_DIRS_LISTER=1
endif
ifeq ($(FULL_TARGET),arm-palmos)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),arm-darwin)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),arm-wince)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),arm-gba)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),arm-nds)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),arm-embedded)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),arm-symbian)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),arm-android)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),powerpc64-linux)
TARGET_DIRS_TEXT=1
TARGET_DIRS_LINUX=1
TARGET_DIRS_UNIX=1
TARGET_DIRS_GRAPH=1
TARGET_DIRS_LISTER=1
endif
ifeq ($(FULL_TARGET),powerpc64-darwin)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),powerpc64-embedded)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),powerpc64-aix)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),avr-embedded)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),armeb-linux)
TARGET_DIRS_TEXT=1
TARGET_DIRS_LINUX=1
TARGET_DIRS_UNIX=1
TARGET_DIRS_GRAPH=1
TARGET_DIRS_LISTER=1
endif
ifeq ($(FULL_TARGET),armeb-embedded)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),mips-linux)
TARGET_DIRS_TEXT=1
TARGET_DIRS_LINUX=1
TARGET_DIRS_UNIX=1
TARGET_DIRS_GRAPH=1
TARGET_DIRS_LISTER=1
endif
ifeq ($(FULL_TARGET),mipsel-linux)
TARGET_DIRS_TEXT=1
TARGET_DIRS_LINUX=1
TARGET_DIRS_UNIX=1
TARGET_DIRS_GRAPH=1
TARGET_DIRS_LISTER=1
endif
ifeq ($(FULL_TARGET),mipsel-embedded)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),mipsel-android)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),jvm-java)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),jvm-android)
TARGET_DIRS_TEXT=1
endif
ifeq ($(FULL_TARGET),i8086-msdos)
TARGET_DIRS_TEXT=1
endif
ifdef TARGET_DIRS_TEXT
text_all:
	$(MAKE) -C text all
text_debug:
	$(MAKE) -C text debug
text_smart:
	$(MAKE) -C text smart
text_release:
	$(MAKE) -C text release
text_units:
	$(MAKE) -C text units
text_examples:
	$(MAKE) -C text examples
text_shared:
	$(MAKE) -C text shared
text_install:
	$(MAKE) -C text install
text_sourceinstall:
	$(MAKE) -C text sourceinstall
text_exampleinstall:
	$(MAKE) -C text exampleinstall
text_distinstall:
	$(MAKE) -C text distinstall
text_zipinstall:
	$(MAKE) -C text zipinstall
text_zipsourceinstall:
	$(MAKE) -C text zipsourceinstall
text_zipexampleinstall:
	$(MAKE) -C text zipexampleinstall
text_zipdistinstall:
	$(MAKE) -C text zipdistinstall
text_clean:
	$(MAKE) -C text clean
text_distclean:
	$(MAKE) -C text distclean
text_cleanall:
	$(MAKE) -C text cleanall
text_info:
	$(MAKE) -C text info
text_makefiles:
	$(MAKE) -C text makefiles
text:
	$(MAKE) -C text all
.PHONY: text_all text_debug text_smart text_release text_units text_examples text_shared text_install text_sourceinstall text_exampleinstall text_distinstall text_zipinstall text_zipsourceinstall text_zipexampleinstall text_zipdistinstall text_clean text_distclean text_cleanall text_info text_makefiles text
endif
ifdef TARGET_DIRS_LINUX
linux_all:
	$(MAKE) -C linux all
linux_debug:
	$(MAKE) -C linux debug
linux_smart:
	$(MAKE) -C linux smart
linux_release:
	$(MAKE) -C linux release
linux_units:
	$(MAKE) -C linux units
linux_examples:
	$(MAKE) -C linux examples
linux_shared:
	$(MAKE) -C linux shared
linux_install:
	$(MAKE) -C linux install
linux_sourceinstall:
	$(MAKE) -C linux sourceinstall
linux_exampleinstall:
	$(MAKE) -C linux exampleinstall
linux_distinstall:
	$(MAKE) -C linux distinstall
linux_zipinstall:
	$(MAKE) -C linux zipinstall
linux_zipsourceinstall:
	$(MAKE) -C linux zipsourceinstall
linux_zipexampleinstall:
	$(MAKE) -C linux zipexampleinstall
linux_zipdistinstall:
	$(MAKE) -C linux zipdistinstall
linux_clean:
	$(MAKE) -C linux clean
linux_distclean:
	$(MAKE) -C linux distclean
linux_cleanall:
	$(MAKE) -C linux cleanall
linux_info:
	$(MAKE) -C linux info
linux_makefiles:
	$(MAKE) -C linux makefiles
linux:
	$(MAKE) -C linux all
.PHONY: linux_all linux_debug linux_smart linux_release linux_units linux_examples linux_shared linux_install linux_sourceinstall linux_exampleinstall linux_distinstall linux_zipinstall linux_zipsourceinstall linux_zipexampleinstall linux_zipdistinstall linux_clean linux_distclean linux_cleanall linux_info linux_makefiles linux
endif
ifdef TARGET_DIRS_UNIX
unix_all:
	$(MAKE) -C unix all
unix_debug:
	$(MAKE) -C unix debug
unix_smart:
	$(MAKE) -C unix smart
unix_release:
	$(MAKE) -C unix release
unix_units:
	$(MAKE) -C unix units
unix_examples:
	$(MAKE) -C unix examples
unix_shared:
	$(MAKE) -C unix shared
unix_install:
	$(MAKE) -C unix install
unix_sourceinstall:
	$(MAKE) -C unix sourceinstall
unix_exampleinstall:
	$(MAKE) -C unix exampleinstall
unix_distinstall:
	$(MAKE) -C unix distinstall
unix_zipinstall:
	$(MAKE) -C unix zipinstall
unix_zipsourceinstall:
	$(MAKE) -C unix zipsourceinstall
unix_zipexampleinstall:
	$(MAKE) -C unix zipexampleinstall
unix_zipdistinstall:
	$(MAKE) -C unix zipdistinstall
unix_clean:
	$(MAKE) -C unix clean
unix_distclean:
	$(MAKE) -C unix distclean
unix_cleanall:
	$(MAKE) -C unix cleanall
unix_info:
	$(MAKE) -C unix info
unix_makefiles:
	$(MAKE) -C unix makefiles
unix:
	$(MAKE) -C unix all
.PHONY: unix_all unix_debug unix_smart unix_release unix_units unix_examples unix_shared unix_install unix_sourceinstall unix_exampleinstall unix_distinstall unix_zipinstall unix_zipsourceinstall unix_zipexampleinstall unix_zipdistinstall unix_clean unix_distclean unix_cleanall unix_info unix_makefiles unix
endif
ifdef TARGET_DIRS_GRAPH
graph_all:
	$(MAKE) -C graph all
graph_debug:
	$(MAKE) -C graph debug
graph_smart:
	$(MAKE) -C graph smart
graph_release:
	$(MAKE) -C graph release
graph_units:
	$(MAKE) -C graph units
graph_examples:
	$(MAKE) -C graph examples
graph_shared:
	$(MAKE) -C graph shared
graph_install:
	$(MAKE) -C graph install
graph_sourceinstall:
	$(MAKE) -C graph sourceinstall
graph_exampleinstall:
	$(MAKE) -C graph exampleinstall
graph_distinstall:
	$(MAKE) -C graph distinstall
graph_zipinstall:
	$(MAKE) -C graph zipinstall
graph_zipsourceinstall:
	$(MAKE) -C graph zipsourceinstall
graph_zipexampleinstall:
	$(MAKE) -C graph zipexampleinstall
graph_zipdistinstall:
	$(MAKE) -C graph zipdistinstall
graph_clean:
	$(MAKE) -C graph clean
graph_distclean:
	$(MAKE) -C graph distclean
graph_cleanall:
	$(MAKE) -C graph cleanall
graph_info:
	$(MAKE) -C graph info
graph_makefiles:
	$(MAKE) -C graph makefiles
graph:
	$(MAKE) -C graph all
.PHONY: graph_all graph_debug graph_smart graph_release graph_units graph_examples graph_shared graph_install graph_sourceinstall graph_exampleinstall graph_distinstall graph_zipinstall graph_zipsourceinstall graph_zipexampleinstall graph_zipdistinstall graph_clean graph_distclean graph_cleanall graph_info graph_makefiles graph
endif
ifdef TARGET_DIRS_LISTER
lister_all:
	$(MAKE) -C lister all
lister_debug:
	$(MAKE) -C lister debug
lister_smart:
	$(MAKE) -C lister smart
lister_release:
	$(MAKE) -C lister release
lister_units:
	$(MAKE) -C lister units
lister_examples:
	$(MAKE) -C lister examples
lister_shared:
	$(MAKE) -C lister shared
lister_install:
	$(MAKE) -C lister install
lister_sourceinstall:
	$(MAKE) -C lister sourceinstall
lister_exampleinstall:
	$(MAKE) -C lister exampleinstall
lister_distinstall:
	$(MAKE) -C lister distinstall
lister_zipinstall:
	$(MAKE) -C lister zipinstall
lister_zipsourceinstall:
	$(MAKE) -C lister zipsourceinstall
lister_zipexampleinstall:
	$(MAKE) -C lister zipexampleinstall
lister_zipdistinstall:
	$(MAKE) -C lister zipdistinstall
lister_clean:
	$(MAKE) -C lister clean
lister_distclean:
	$(MAKE) -C lister distclean
lister_cleanall:
	$(MAKE) -C lister cleanall
lister_info:
	$(MAKE) -C lister info
lister_makefiles:
	$(MAKE) -C lister makefiles
lister:
	$(MAKE) -C lister all
.PHONY: lister_all lister_debug lister_smart lister_release lister_units lister_examples lister_shared lister_install lister_sourceinstall lister_exampleinstall lister_distinstall lister_zipinstall lister_zipsourceinstall lister_zipexampleinstall lister_zipdistinstall lister_clean lister_distclean lister_cleanall lister_info lister_makefiles lister
endif
ifdef TARGET_DIRS_MODEX
modex_all:
	$(MAKE) -C modex all
modex_debug:
	$(MAKE) -C modex debug
modex_smart:
	$(MAKE) -C modex smart
modex_release:
	$(MAKE) -C modex release
modex_units:
	$(MAKE) -C modex units
modex_examples:
	$(MAKE) -C modex examples
modex_shared:
	$(MAKE) -C modex shared
modex_install:
	$(MAKE) -C modex install
modex_sourceinstall:
	$(MAKE) -C modex sourceinstall
modex_exampleinstall:
	$(MAKE) -C modex exampleinstall
modex_distinstall:
	$(MAKE) -C modex distinstall
modex_zipinstall:
	$(MAKE) -C modex zipinstall
modex_zipsourceinstall:
	$(MAKE) -C modex zipsourceinstall
modex_zipexampleinstall:
	$(MAKE) -C modex zipexampleinstall
modex_zipdistinstall:
	$(MAKE) -C modex zipdistinstall
modex_clean:
	$(MAKE) -C modex clean
modex_distclean:
	$(MAKE) -C modex distclean
modex_cleanall:
	$(MAKE) -C modex cleanall
modex_info:
	$(MAKE) -C modex info
modex_makefiles:
	$(MAKE) -C modex makefiles
modex:
	$(MAKE) -C modex all
.PHONY: modex_all modex_debug modex_smart modex_release modex_units modex_examples modex_shared modex_install modex_sourceinstall modex_exampleinstall modex_distinstall modex_zipinstall modex_zipsourceinstall modex_zipexampleinstall modex_zipdistinstall modex_clean modex_distclean modex_cleanall modex_info modex_makefiles modex
endif
ifdef TARGET_DIRS_WIN32
win32_all:
	$(MAKE) -C win32 all
win32_debug:
	$(MAKE) -C win32 debug
win32_smart:
	$(MAKE) -C win32 smart
win32_release:
	$(MAKE) -C win32 release
win32_units:
	$(MAKE) -C win32 units
win32_examples:
	$(MAKE) -C win32 examples
win32_shared:
	$(MAKE) -C win32 shared
win32_install:
	$(MAKE) -C win32 install
win32_sourceinstall:
	$(MAKE) -C win32 sourceinstall
win32_exampleinstall:
	$(MAKE) -C win32 exampleinstall
win32_distinstall:
	$(MAKE) -C win32 distinstall
win32_zipinstall:
	$(MAKE) -C win32 zipinstall
win32_zipsourceinstall:
	$(MAKE) -C win32 zipsourceinstall
win32_zipexampleinstall:
	$(MAKE) -C win32 zipexampleinstall
win32_zipdistinstall:
	$(MAKE) -C win32 zipdistinstall
win32_clean:
	$(MAKE) -C win32 clean
win32_distclean:
	$(MAKE) -C win32 distclean
win32_cleanall:
	$(MAKE) -C win32 cleanall
win32_info:
	$(MAKE) -C win32 info
win32_makefiles:
	$(MAKE) -C win32 makefiles
win32:
	$(MAKE) -C win32 all
.PHONY: win32_all win32_debug win32_smart win32_release win32_units win32_examples win32_shared win32_install win32_sourceinstall win32_exampleinstall win32_distinstall win32_zipinstall win32_zipsourceinstall win32_zipexampleinstall win32_zipdistinstall win32_clean win32_distclean win32_cleanall win32_info win32_makefiles win32
endif
ifdef TARGET_DIRS_OS2
os2_all:
	$(MAKE) -C os2 all
os2_debug:
	$(MAKE) -C os2 debug
os2_smart:
	$(MAKE) -C os2 smart
os2_release:
	$(MAKE) -C os2 release
os2_units:
	$(MAKE) -C os2 units
os2_examples:
	$(MAKE) -C os2 examples
os2_shared:
	$(MAKE) -C os2 shared
os2_install:
	$(MAKE) -C os2 install
os2_sourceinstall:
	$(MAKE) -C os2 sourceinstall
os2_exampleinstall:
	$(MAKE) -C os2 exampleinstall
os2_distinstall:
	$(MAKE) -C os2 distinstall
os2_zipinstall:
	$(MAKE) -C os2 zipinstall
os2_zipsourceinstall:
	$(MAKE) -C os2 zipsourceinstall
os2_zipexampleinstall:
	$(MAKE) -C os2 zipexampleinstall
os2_zipdistinstall:
	$(MAKE) -C os2 zipdistinstall
os2_clean:
	$(MAKE) -C os2 clean
os2_distclean:
	$(MAKE) -C os2 distclean
os2_cleanall:
	$(MAKE) -C os2 cleanall
os2_info:
	$(MAKE) -C os2 info
os2_makefiles:
	$(MAKE) -C os2 makefiles
os2:
	$(MAKE) -C os2 all
.PHONY: os2_all os2_debug os2_smart os2_release os2_units os2_examples os2_shared os2_install os2_sourceinstall os2_exampleinstall os2_distinstall os2_zipinstall os2_zipsourceinstall os2_zipexampleinstall os2_zipdistinstall os2_clean os2_distclean os2_cleanall os2_info os2_makefiles os2
endif
ifdef TARGET_DIRS_FREEBSD
freebsd_all:
	$(MAKE) -C freebsd all
freebsd_debug:
	$(MAKE) -C freebsd debug
freebsd_smart:
	$(MAKE) -C freebsd smart
freebsd_release:
	$(MAKE) -C freebsd release
freebsd_units:
	$(MAKE) -C freebsd units
freebsd_examples:
	$(MAKE) -C freebsd examples
freebsd_shared:
	$(MAKE) -C freebsd shared
freebsd_install:
	$(MAKE) -C freebsd install
freebsd_sourceinstall:
	$(MAKE) -C freebsd sourceinstall
freebsd_exampleinstall:
	$(MAKE) -C freebsd exampleinstall
freebsd_distinstall:
	$(MAKE) -C freebsd distinstall
freebsd_zipinstall:
	$(MAKE) -C freebsd zipinstall
freebsd_zipsourceinstall:
	$(MAKE) -C freebsd zipsourceinstall
freebsd_zipexampleinstall:
	$(MAKE) -C freebsd zipexampleinstall
freebsd_zipdistinstall:
	$(MAKE) -C freebsd zipdistinstall
freebsd_clean:
	$(MAKE) -C freebsd clean
freebsd_distclean:
	$(MAKE) -C freebsd distclean
freebsd_cleanall:
	$(MAKE) -C freebsd cleanall
freebsd_info:
	$(MAKE) -C freebsd info
freebsd_makefiles:
	$(MAKE) -C freebsd makefiles
freebsd:
	$(MAKE) -C freebsd all
.PHONY: freebsd_all freebsd_debug freebsd_smart freebsd_release freebsd_units freebsd_examples freebsd_shared freebsd_install freebsd_sourceinstall freebsd_exampleinstall freebsd_distinstall freebsd_zipinstall freebsd_zipsourceinstall freebsd_zipexampleinstall freebsd_zipdistinstall freebsd_clean freebsd_distclean freebsd_cleanall freebsd_info freebsd_makefiles freebsd
endif
ifdef TARGET_DIRS_NETWARE
netware_all:
	$(MAKE) -C netware all
netware_debug:
	$(MAKE) -C netware debug
netware_smart:
	$(MAKE) -C netware smart
netware_release:
	$(MAKE) -C netware release
netware_units:
	$(MAKE) -C netware units
netware_examples:
	$(MAKE) -C netware examples
netware_shared:
	$(MAKE) -C netware shared
netware_install:
	$(MAKE) -C netware install
netware_sourceinstall:
	$(MAKE) -C netware sourceinstall
netware_exampleinstall:
	$(MAKE) -C netware exampleinstall
netware_distinstall:
	$(MAKE) -C netware distinstall
netware_zipinstall:
	$(MAKE) -C netware zipinstall
netware_zipsourceinstall:
	$(MAKE) -C netware zipsourceinstall
netware_zipexampleinstall:
	$(MAKE) -C netware zipexampleinstall
netware_zipdistinstall:
	$(MAKE) -C netware zipdistinstall
netware_clean:
	$(MAKE) -C netware clean
netware_distclean:
	$(MAKE) -C netware distclean
netware_cleanall:
	$(MAKE) -C netware cleanall
netware_info:
	$(MAKE) -C netware info
netware_makefiles:
	$(MAKE) -C netware makefiles
netware:
	$(MAKE) -C netware all
.PHONY: netware_all netware_debug netware_smart netware_release netware_units netware_examples netware_shared netware_install netware_sourceinstall netware_exampleinstall netware_distinstall netware_zipinstall netware_zipsourceinstall netware_zipexampleinstall netware_zipdistinstall netware_clean netware_distclean netware_cleanall netware_info netware_makefiles netware
endif
ifdef TARGET_DIRS_NETWLIBC
netwlibc_all:
	$(MAKE) -C netwlibc all
netwlibc_debug:
	$(MAKE) -C netwlibc debug
netwlibc_smart:
	$(MAKE) -C netwlibc smart
netwlibc_release:
	$(MAKE) -C netwlibc release
netwlibc_units:
	$(MAKE) -C netwlibc units
netwlibc_examples:
	$(MAKE) -C netwlibc examples
netwlibc_shared:
	$(MAKE) -C netwlibc shared
netwlibc_install:
	$(MAKE) -C netwlibc install
netwlibc_sourceinstall:
	$(MAKE) -C netwlibc sourceinstall
netwlibc_exampleinstall:
	$(MAKE) -C netwlibc exampleinstall
netwlibc_distinstall:
	$(MAKE) -C netwlibc distinstall
netwlibc_zipinstall:
	$(MAKE) -C netwlibc zipinstall
netwlibc_zipsourceinstall:
	$(MAKE) -C netwlibc zipsourceinstall
netwlibc_zipexampleinstall:
	$(MAKE) -C netwlibc zipexampleinstall
netwlibc_zipdistinstall:
	$(MAKE) -C netwlibc zipdistinstall
netwlibc_clean:
	$(MAKE) -C netwlibc clean
netwlibc_distclean:
	$(MAKE) -C netwlibc distclean
netwlibc_cleanall:
	$(MAKE) -C netwlibc cleanall
netwlibc_info:
	$(MAKE) -C netwlibc info
netwlibc_makefiles:
	$(MAKE) -C netwlibc makefiles
netwlibc:
	$(MAKE) -C netwlibc all
.PHONY: netwlibc_all netwlibc_debug netwlibc_smart netwlibc_release netwlibc_units netwlibc_examples netwlibc_shared netwlibc_install netwlibc_sourceinstall netwlibc_exampleinstall netwlibc_distinstall netwlibc_zipinstall netwlibc_zipsourceinstall netwlibc_zipexampleinstall netwlibc_zipdistinstall netwlibc_clean netwlibc_distclean netwlibc_cleanall netwlibc_info netwlibc_makefiles netwlibc
endif
ifdef TARGET_DIRS_MORPHOS
morphos_all:
	$(MAKE) -C morphos all
morphos_debug:
	$(MAKE) -C morphos debug
morphos_smart:
	$(MAKE) -C morphos smart
morphos_release:
	$(MAKE) -C morphos release
morphos_units:
	$(MAKE) -C morphos units
morphos_examples:
	$(MAKE) -C morphos examples
morphos_shared:
	$(MAKE) -C morphos shared
morphos_install:
	$(MAKE) -C morphos install
morphos_sourceinstall:
	$(MAKE) -C morphos sourceinstall
morphos_exampleinstall:
	$(MAKE) -C morphos exampleinstall
morphos_distinstall:
	$(MAKE) -C morphos distinstall
morphos_zipinstall:
	$(MAKE) -C morphos zipinstall
morphos_zipsourceinstall:
	$(MAKE) -C morphos zipsourceinstall
morphos_zipexampleinstall:
	$(MAKE) -C morphos zipexampleinstall
morphos_zipdistinstall:
	$(MAKE) -C morphos zipdistinstall
morphos_clean:
	$(MAKE) -C morphos clean
morphos_distclean:
	$(MAKE) -C morphos distclean
morphos_cleanall:
	$(MAKE) -C morphos cleanall
morphos_info:
	$(MAKE) -C morphos info
morphos_makefiles:
	$(MAKE) -C morphos makefiles
morphos:
	$(MAKE) -C morphos all
.PHONY: morphos_all morphos_debug morphos_smart morphos_release morphos_units morphos_examples morphos_shared morphos_install morphos_sourceinstall morphos_exampleinstall morphos_distinstall morphos_zipinstall morphos_zipsourceinstall morphos_zipexampleinstall morphos_zipdistinstall morphos_clean morphos_distclean morphos_cleanall morphos_info morphos_makefiles morphos
endif
all: $(addsuffix _all,$(TARGET_DIRS))
debug: $(addsuffix _debug,$(TARGET_DIRS))
smart: $(addsuffix _smart,$(TARGET_DIRS))
release: $(addsuffix _release,$(TARGET_DIRS))
units: $(addsuffix _units,$(TARGET_DIRS))
examples: $(addsuffix _examples,$(TARGET_DIRS))
shared: $(addsuffix _shared,$(TARGET_DIRS))
install: fpc_install $(addsuffix _install,$(TARGET_DIRS))
sourceinstall: fpc_sourceinstall
exampleinstall: fpc_exampleinstall $(addsuffix _exampleinstall,$(TARGET_DIRS))
distinstall: fpc_distinstall
zipinstall: fpc_zipinstall
zipsourceinstall: fpc_zipsourceinstall
zipexampleinstall: fpc_zipexampleinstall $(addsuffix _zipexampleinstall,$(TARGET_DIRS))
zipdistinstall: fpc_zipdistinstall
clean: $(addsuffix _clean,$(TARGET_DIRS))
distclean: $(addsuffix _distclean,$(TARGET_DIRS))
cleanall: $(addsuffix _cleanall,$(TARGET_DIRS))
info: fpc_info
makefiles: fpc_makefiles
.PHONY: all debug smart release units examples shared install sourceinstall exampleinstall distinstall zipinstall zipsourceinstall zipexampleinstall zipdistinstall clean distclean cleanall info makefiles
ifneq ($(wildcard fpcmake.loc),)
include fpcmake.loc
endif
.PHONY: installexamples demozip
installexamples:
	$(MKDIR) $(INSTALL_SOURCEDIR)
	$(COPYTREE) * $(INSTALL_SOURCEDIR)
demozip: zipsourceinstall
